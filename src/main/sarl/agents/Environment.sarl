package agents;

import GUI.Controller
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.OpenEventSpaceSpecification
import java.util.Collection
import java.util.List
import java.util.TreeMap
import java.util.UUID
import model.Car.CarObject
import model.Graph
import model.GraphNode
import model.PositionedObjects
import model.math.Point2f
import model.road.PositionOnTheGraph
import io.sarl.core.Behaviors
import io.sarl.core.InnerContextAccess
import main.Positions
import io.sarl.core.Schedules
import model.math.Point2i
import java.util.Random
import io.sarl.core.Logging
import io.sarl.core.AgentTask
import model.road.TrafficLight
import java.util.ArrayList
import model.road.GraphCreator

agent Environment {
	uses Lifecycle, DefaultContextInteractions, Behaviors, InnerContextAccess, Logging, Schedules
	var graph : Graph
	var posCars : Positions = new Positions
	val NUMBERCARMAX  = 5
	val y = 800
	val x = 1200
	var numberCar =0
	var rnd : Random
	var lights : ArrayList<TrafficLight>
				
	var changeLight : AgentTask
		
	var listener : Controller
			
	on Initialize {
		rnd = new Random()
		// Initialize the graph
		graph = GraphCreator.city2
		
		listener = occurrence.parameters.get(0) as Controller
		var ispace = defaultContext.createSpace(OpenEventSpaceSpecification, UUID.randomUUID)
		ispace.register(asEventListener)
		listener.setGUISpace(ispace)
		lights = graph.getTrafficLights		
		listener.listenAndDraw(graph)
		
		

		//spawnCarAgents // function that spawns the car agents
		
			
		changeLight = atFixedDelay(5000) [
			try {
				wake(new UpdateLightStates);
			} catch (e : Exception) {
				e.printStackTrace
			}
		]
			
		//update the environment (TimeStep)
		var updateEnv = atFixedDelay(100) [
			try {
				wake(new TimeStep);
			} catch (e : Exception) {
				e.printStackTrace
			}
		]

		atFixedDelay(3000) [
			try {
				wake(new spawnCarAgents);
			} catch (e : Exception) {
				e.printStackTrace
			}
		]
		
		
	}
	
	on UpdateLightStates {
		var j = 0
		for(j=0; j <graph.trafficLights.size; j++)
		{
			graph.trafficLights.get(j).setState(true)
			graph.trafficLights.get(j).colorChange
		}
	}
	
	on TimeStep { // Every time step, the enviroment have to the following computations
	// get perception
		//spawnCarAgents
		percieve()
		applyInfluences()
	}
			
	on CarDead { // Everytime a Car is dead, the Enviroment create a new one
		numberCar--
		var nsp = graph.spawningPoints.length
		var i = 0
		val numberNew = rnd.nextInt(NUMBERCARMAX - numberCar)
		numberCar+=numberNew
		for(i=0;i<numberNew;i++)
		{
			//var car = new CarObject(0, 0)
			//spawn(typeof(CarAgent), car)
			//var pos = new Point2i(rnd.nextInt(x), rnd.nextInt(y))
			var car = new CarObject(0) // create the agent body
			spawnInContext(CarAgent, getInnerContext, car)
			graph.spawningPoints.get((rnd.nextDouble() * nsp) as int).addObject(car)
			
		}
		
	}	
	def percieve {
		var map = new TreeMap<CarObject, ArrayList<PositionedObjects>> // returns values
		var i : float //local variable
		var j : float //local variable
		for (gn : graph.nodes) { //we have to go through the Graph
			for (o : gn.posObj) { //and get the perception for each object in each graph node
				var li = new ArrayList<PositionedObjects> //auxiliary variable
				if (o instanceof CarObject) { // but we need just the objects that are actually Agents
					//first, we look in front of the agent
					var posDir = 0
					for (i = o.length + 1; i < o.frustum; i++) { //from his position +1 till the end of his frustum
						/*We have two cases: the first one is that the frustum
						 * ends in the same graph node
						 */
						if (i + o.position.x <= gn.length) {
							if (!gn.isEmptyAt(i + o.position.x,0,o)) {
								li += gn.objectAt(i + o.position.x)
							}
						} else {
							/*the other case is that we need to check
							 * into neighbours nodes
							 */
							for (fnn : gn.frontNeighbourNodes) { //we look into each front neighbour node
								posDir = gn.frontNeighbourNodes.length
								for(j=0;j<o.frustum-i;j++) //from 0 to the remaining frustum length
								{
									if (!fnn.isEmptyAt(j,0,o)) {
										li += fnn.objectAt(j)
									}
								}
							}
							/*for (cfnn : gn.frontNeighbourNodes) { // we look into each front conflict node
								for (j = 0; j < o.frustum - i; j++) // from 0 to the remaining frustum length
								{
									if (!cfnn.isEmptyAt(j, 0,o)) {
										li += cfnn.objectAt(j)
									}
								}
							}*/
						
						}
					}
					/*for (i = o.length + 1; i < o.frustum; i++) { // we do the same, but with backwards
						if (o.position.x - i >= 0) {
							if (!gn.isEmptyAt(o.position.x - i,0,o)) {
								li += gn.objectAt(o.position.x - i)
							} else {
								for (bnn : gn.backNeighbourNodes) {
									for(j=bnn.length;j<o.frustum-i;j++)
									{
										if (!bnn.isEmptyAt(j,0,o)) {
											li += bnn.objectAt(j)
										}
									}
								}
								for (cbnn : gn.conflictNodesInBack) {
									for (j = cbnn.length; j < o.frustum - i; j++) {
										if (!cbnn.isEmptyAt(j, 0,o)) {
											li += cbnn.objectAt(j)
										}
									}
								}
							}
						}
					}*/
					o.direction = posDir
					map.put(o, li)
				}
			}
		}
		if (map !== null) {
			var perception = new Perception
			perception.map = map
			emit(perception)	
		}
	}
	
	
	def applyInfluences {
		/*This function will take each object influence and will try to apply it.
		 * If it's posible will change its position, if it's not, it will ignore it 
		 */	 
		for (gn : graph.nodes) { //for each graph node on the graph
			for(var i = 0; i< gn.posObj.size ; i++){ //will take each agent on it
				var o = gn.posObj.get(i)
				if (o instanceof CarObject) {
					if (!o.getInfluenceDone) {
						// We will see if it's already out of the graph
						if (o.position.x + o.influence.x > gn.length && gn.isFinalNode) {
							System.out.println("tchao")
							var ev = new CarAgentIsDead(o)
							emit(ev)
							gn.remove(o)
						} else if (!collision(o, desiredPosition(o, gn))) { // if there is not a collision,
							o.position = new Point2f(desiredPosition(o, gn).position.getX, 0) 	// the position of the object get update
							System.out.println(o.position.x)
						} 	// if there's a collision, we will ignore it
						o.setInfluenceDone(true)
					}
					
				}
			}
		}
		for (gn : graph.nodes) {
			for(o : gn.posObj){ //will take each agent on it
				if(o instanceof CarObject){
					o.setInfluenceDone(false)
				}
			}
			
		}
	/*BUG ALERT: if the agent change of graph node on an application of its influence,
	 * its influence may be applyed twice
	 */	
	}
	
	def collision(object : PositionedObjects, newPosition : PositionOnTheGraph) : boolean {
		/*We are going to test if there's a collision with other objects */	
			return !newPosition.graphNode.noCarAt(newPosition.position.x, object.length , object)
	}
			
	def desiredPosition(posObj : PositionedObjects, currentNode : GraphNode) : PositionOnTheGraph {
		/*This function will take an object knowing the node where it is and then,
		 * will give the position on the graph where it wants to go
		 */
		/*While the object doesn't go out of the node, his position will change but his node, not. */
		if (posObj.position.x + posObj.influence.x + 8 <= currentNode.length) {
			return new PositionOnTheGraph(posObj.position.add(posObj.influence), currentNode)
		}
		/* Otherwise it will change to the position 0 of the next node
		 */
		else {
			var car = posObj as CarObject
			currentNode.remove(car)
			currentNode.nextNode(car.turnTo).addObject(car)
			
			
			return new PositionOnTheGraph(new Point2f(0f,0f),currentNode.nextNode(car.turnTo))
		}
	}
		
	on spawnCarAgents { //For spawn NUMBER_OF_CARS Car Agents
		//val newNumberOfCar = rnd.nextInt(NUMBERCARMAX - 5) + 5
		//numberCar += newNumberOfCar
		if (numberCar< NUMBERCARMAX) {
			//var pos = new Point2i(rnd.nextInt(x), rnd.nextInt(y))
			var car = new CarObject(0) // create the agent body
			var id = UUID::randomUUID
			spawnInContextWithID(CarAgent,id, getDefaultContext,car)	
			graph.spawningPoints.get(rnd.nextInt(graph.spawningPoints.length)).addObject(car) // select the node where it will spawn
			numberCar++
		}
		
	}
}
