package agents

import io.sarl.core.AgentTask
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.Random
import java.util.UUID
import main.Positions
import model.Car.CarObject
import model.math.Point2f
import model.math.Point2i
import model.road.TrafficLight
import model.road.LightColor
import model.road.MaxSpeedSign

agent CarAgent {
	uses Lifecycle, DefaultContextInteractions, Schedules, Behaviors, Logging 
	var previousDirection : int
	var CarBody : CarObject
	val random = new Random
	var id : UUID
	var speed  = 15//2=50,3=90/4=130
	var move : AgentTask
		
	on Initialize {
		
		id = UUID.randomUUID
		info("car created")
		CarBody = occurrence.parameters.get(0) as CarObject
		CarBody.getDirection().randomMove()
		//speed = (random.nextDouble()*15+5) as int
		CarBody.setInfluence(new Point2f(speed, 0))
	}
		
	on CarAgentIsDead {
		System.out.println("someone is dead")
		/*The agent will only take account of it if it's its car body the one who's dead */
		if (occurrence.ob === CarBody) {
			// TODO delete the car image from the gui
			var e = new CarDead
			emit(e)
			killMe
		}
		
	}

	on Perception {
		var nextSpeed = speed
		System.out.println(CarBody.getDirection)
		for (percept : occurrence.map.get(CarBody)) {
			if(percept instanceof TrafficLight){
				//if (CarBody.position.x < percept.position.x) {
					if (percept.color == LightColor.RED) {
						nextSpeed = 0
						}
				//}
			}
			else if(percept instanceof MaxSpeedSign){
				speed = (percept.maxSpeed as int) / 3
				nextSpeed = speed
			}
			else if(percept instanceof CarObject){
				if(percept.position.x - CarBody.position.x < 25){
					nextSpeed = 0
				}
			}
			
		}
	CarBody.turnTo = (random.nextDouble()*CarBody.direction) as int
	CarBody.influence = new Point2f(nextSpeed,0)
	}
	
	/*on CarAgentMove{
		//GetNodeInfrontofMe
		//then getTrafficLight
		//get myPossible directions
		//get randomly one of the allowed direction
		//based on the direction
		var i : int
		//i = CarBody.getRoad().get
		/*
		if(CarBody.getRoad.getTrafficLight==green){
		/*if(CarBody.getRoad.getTrafficLight==LightColor.GREEN){
			if(i==0){//strait
				if (CarBody.getRoad.getEnvObjectsat(CarBody.myPosition) != 0 & ) {
					
				}
			}else
				if(i==2){//right
					turn(Direction.NORTH)
				}else{
					turn(Direction.EAST)
				}
		}else{
			CarBody.setVitesse(0.0f)
		}
		

		}

		
	}*/
	
	def memorizeAndMoveTo(direction : int) {
		this.previousDirection = direction
		move(direction)
	}

	def randomMove(directions : int) {
		var myPosdir : int[]
		var selectedDirection : int
			if (directions == 0 && directions == this.previousDirection) {
				selectedDirection = this.previousDirection
			}
		if (directions > 0) {
				if (CarBody.direction == 3){
				myPosdir = #[0,1,2]
			} else if (CarBody.direction == 2) {
					myPosdir = #[0,2]
				} else if (CarBody.direction == 1) {
					myPosdir = #[0, 1]
					}
				
				selectedDirection = myPosdir.get(random.nextInt(myPosdir.length))
				
			}
		selectedDirection.memorizeAndMoveTo
	}
	
	
	def turn (direction : int){
		
	}
	
	
	def move (direction : int){
		//the +1 is not a correct way to do this 
		//should know "le pas = 3"
		
		if (direction == 0) {
			CarBody.setInfluence(new Point2f(3, 0))
		} else if (direction == 1) { // move right
			CarBody.setInfluence(new Point2f(3, 0))
			CarBody.turnTo = 1
		} else if (direction == 2) { // move left
			CarBody.setInfluence(new Point2f(3, 0))
			CarBody.turnTo = 2
		}
	}
}
