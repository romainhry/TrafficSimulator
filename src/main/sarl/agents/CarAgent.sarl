package agents

import io.sarl.core.Lifecycle
import java.util.Random
import io.sarl.core.Initialize
import java.util.List
import model.Car.CarObject
import model.Car.Direction
import model.road.LightColor
import model.math.Point2i
import model.math.Point2f
import io.sarl.core.*
import io.sarl.util.Scopes
import java.util.UUID
import io.sarl.core.InnerContextAccess

agent CarAgent {
	uses Lifecycle, DefaultContextInteractions, Schedules

	var previousDirection : int
	var CarBody : CarObject
	val random = new Random
	var move : AgentTask
	var exited : boolean
	var destroyed : boolean
	var parentAgent : UUID
	on Initialize {
		CarBody = new CarObject(0, 0)
		//Controller.addtoroadgui(CarBody.getCarIcon, CarBody.UID)
		CarBody.getDirection().randomMove()
	}

	on CarAgentIsDead {
		// To Do : delete the car image from the gui
		// kill the agent
		exited = true
		move.cancel(true)
		//innerContext.defaultSpace.emit(new Exit)
		killMe
	}
	/* 
	 * Clean every task
	 */
	def cleanBeforeExit() {
		move.cancel(true)
		exited = true
		destroyed = true
	}

	on Exit [!exited && isFrom(getParentID)] {
		this.cleanBeforeExit
		emit(new Exit, Scopes.addresses(defaultSpace.getAddress(parentAgent)))
		killMe
	}
	on Perception {
		var freeDirections : int
		freeDirections = CarBody.getDirection
		var car : CarObject
		for (percept : occurrence.objects) {
			//var v = percept.position - occurrence.position
			if(percept instanceof CarObject){
				car = percept
				break;
				}
		}
	if (car !== null) {
		var direction : int
		if (CarBody.getTurnTo!==0){
			if (CarBody.direction == 3){
				var posdir : int[] = #[0,1,2]
				direction =posdir.get(random.nextInt(posdir.length))
				direction.memorizeAndMoveTo
			} else if (CarBody.direction == 2) {
					var posdir : int[] = #[0,2]
					direction = posdir.get(random.nextInt(posdir.length))
					direction.memorizeAndMoveTo
				} else if (CarBody.direction == 1) {
					var posdir : int[] = #[0, 1]
					direction = posdir.get(random.nextInt(posdir.length))
					direction.memorizeAndMoveTo
				} 
		}else {
			freeDirections.randomMove
		}
			
	}
	
	}

	/*on CarAgentMove{
		//GetNodeInfrontofMe
		//then getTrafficLight
		//get possible directions
		//get randomly one of the allowed direction
		//based on the direction
		var i : int
		//i = CarBody.getRoad().get
		/*
		if(CarBody.getRoad.getTrafficLight==green){
		/*if(CarBody.getRoad.getTrafficLight==LightColor.GREEN){
			if(i==0){//strait
				if (CarBody.getRoad.getEnvObjectsat(CarBody.position) != 0 & ) {
					
				}
			}else
				if(i==2){//right
					turn(Direction.NORTH)
				}else{
					turn(Direction.EAST)
				}
		}else{
			CarBody.setVitesse(0.0f)
		}
		* 

		}

		
	}*/
	def memorizeAndMoveTo(direction : int) {
		this.previousDirection = direction
		move(direction)
	}

	def randomMove(directions : int) {
		var posdir : int[]
		var selectedDirection : int
			if (directions == 0 && directions == this.previousDirection) {
				selectedDirection = this.previousDirection
			}
		if (directions > 0) {
				if (CarBody.direction == 3){
				posdir = #[0,1,2]
			} else if (CarBody.direction == 2) {
					posdir = #[0,2]
				} else if (CarBody.direction == 1) {
					posdir = #[0, 1]
					}
				
				selectedDirection = posdir.get(random.nextInt(posdir.length))
				
			}
		selectedDirection.memorizeAndMoveTo
	}
	def turn (direction : int){
		
	}
	def move (direction : int){
		//the +1 is not a correct way to do this 
		//should know "le pas = 3"
		
		if (direction == 0) {
			CarBody.setInfluence(new Point2f(3, 0))
		} else if (direction == 1) { // move right
			CarBody.setInfluence(new Point2f(0, 3))
		} else if (direction == 2) { // move left
			CarBody.setInfluence(new Point2f(0, -3))
		}
	}

}
