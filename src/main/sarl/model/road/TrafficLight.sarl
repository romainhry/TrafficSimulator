package model.road

import model.PositionedObjects
import model.math.Point2f
import java.util.TimerTask
import java.util.Timer
import model.math.Point2i

class TrafficLight extends PositionedObjects {
	var color : LightColor //enum defined at the end of this file
	var timer = new Timer() // We utilize it for control the time of the color change
	var stateChanged = false;
			
	//var guiPos : Point2i

	new(x:float) {
		this.position = new Point2f(x, 16)
		this.color = LightColor.RED
		//guiPos = new Point2i(x, y)
		this.length = 1f
		//activate
	}
			
	/* we have also the possibility of create a traffic light antisynchronized with other */
	new(x:float, neighbour : TrafficLight, sync : boolean) {
		this.position = new Point2f(x, 16)
		//guiPos = new Point2i(x,y)
		//position = new Point2f()
		this.length = 1f
		if(!sync)
			this.antiSynchr(neighbour)
		else
			this.synchr(neighbour)
		//activate
	}
	
	def setPos(p : Point2f) {
		position = p
	}
	
	def getState : boolean {
		return stateChanged
	}

	def setState(s : boolean) : boolean {
		stateChanged = s
	}
	
	def getGuiPos() : Point2i {
		return guiPos
	}

	def getPos() : Point2f {
		return position
	}
	
	def getColor : LightColor {
		this.color
	}

	def setColor(c : LightColor) : LightColor {
		this.color = c
	}
	
	/*2 traffic lights that have the same color at the same time */
	def synchr(neighbour : TrafficLight) {
		this.color = neighbour.color
	}
		
	/* 2 traffic lights that have the opposite color at the same time*/
	def antiSynchr(neighbour : TrafficLight) {
		if (neighbour.color == LightColor.RED) {
			this.color = LightColor.GREEN
		}
		else {
			this.color = LightColor.RED
		}
	}

	def colorChange() {
		if (this.color == LightColor.RED) {
			this.color = LightColor.GREEN
		}
		else{
			this.color = LightColor.RED
		}
	}
	
}

public enum LightColor {
	RED, GREEN
}
