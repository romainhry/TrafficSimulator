package model.road

import model.PositionedObjects
import model.math.Point2f
import java.util.TimerTask
import java.util.Timer

class TrafficLight extends PositionedObjects {
	var color : LightColor // enum defined at the end of this file
	var nextColor : LightColor
	var length : float
	var timer = new Timer() // We utilize it for control the time of the color change

	new(x : float) {
		this.position = new Point2f(x, 0f) // it has no lateral deviation
		this.length = 1f
		this.color = LightColor.RED
		this.nextColor = LightColor.YELLOW

	}
	def getColor : LightColor {
		this.color
	}

	def setColor(c : LightColor) : LightColor {
		this.color = c
	}

	def getNextColor : LightColor {
		this.nextColor
	}

	def setNextColor(c : LightColor) : LightColor {
		this.nextColor = c
	}
	/* 2 traffic lights that have the same color at the same time
	 */
	def synchr(neighbour : TrafficLight) {
		this.color = neighbour.color
		this.nextColor = neighbour.nextColor
	}
	/* 2 traffic lights that have the opposite color at the same time
	 */
	def antiSynchr(neighbour : TrafficLight) {
		if (neighbour.color == LightColor.RED) {
			this.color = LightColor.GREEN
			this.nextColor = LightColor.YELLOW
		} else if (neighbour.color == LightColor.GREEN) {
			this.color = LightColor.RED
			this.nextColor = LightColor.YELLOW
		} else {
			this.color = LightColor.YELLOW
			if (neighbour.nextColor == LightColor.RED) {
				this.nextColor = LightColor.GREEN
			} else {
				this.nextColor = LightColor.RED
			}
		}
	}

	def colorChange() {
		if (this.color == LightColor.RED) {
			this.color = this.nextColor
			this.nextColor = LightColor.GREEN
		} else if (this.color == LightColor.GREEN) {
			this.color = this.nextColor
			this.nextColor = LightColor.RED
		} else {
			this.color = this.nextColor
			this.nextColor = LightColor.YELLOW
		}
	}

	def activate(w : int, dur : int) {
			/* activate a Traffic Light that work alone
			 * w it0s the time that it will wait before start,
			 * dur is the duration of the yellow color
			 */
		var task = new TimerTask() {
			var contador = 0

			@Override
			def run {
				if (contador < 4) { // it's in GREEN or RED
					if (contador == 3) {
						colorChange
					}
				} else {
					colorChange
					contador = 0 	// It's in YELLOW
				}
				contador++
			}
		}
		timer.schedule(task, w, dur)
	}

	def activate(t1 : TrafficLight) {
			/* activate 2 traffic lights that work together
			 */
		this.activate(0, 1000)
		t1.activate(4000, 1000)
	}

	def activate3(w : int, dur : int) {
			/* activation of a traffic light that will work with other 2
			 */
		var task = new TimerTask() {
			var contador = 0
			var flag = 0

			@Override
			def run {
				if (flag == 0) {
					if (contador < 8) { // it's in RED
						if (contador == 7) {
							colorChange
						}
					} else {
						colorChange
						contador = 0 // It's in YELLOW
						flag = 1
					}
				} else {
					if (contador < 4) { // it's in GREEN
						if (contador == 3) {
							colorChange
						}
					} else {
						colorChange
						contador = 0 // It's in YELLOW
						flag = 0
					}
				}
				contador++
			}
		}
		timer.schedule(task, w, dur)
	}

	def activate(t1 : TrafficLight, t2 : TrafficLight) {
			/* activation of 3 traffic lights that will work together
			 */
		this.activate3(0, 1000)
		t1.activate3(4000, 1000)
		t2.activate3(7000, 1000)
	}

	def activate4(w : int, dur : int) {
			/* activation of a traffic light that will work with other 3
			 */
		var task = new TimerTask() {
			var contador = 0
			var flag = 0

			@Override
			def run {
				if (flag == 0) {
					if (contador < 12) { // it's in RED
						if (contador == 11) {
							colorChange
						}
					} else {
						colorChange
						contador = 0 // It's in YELLOW
						flag = 1
					}
				} else {
					if (contador < 4) { // it's in GREEN
						if (contador == 3) {
							colorChange
						}
					} else {
						colorChange
						contador = 0 // It's in YELLOW
						flag = 0
					}
				}
				contador++
			}
		}
		timer.schedule(task, w, dur)
	}

	def activate(
		t1 : TrafficLight,
		t2 : TrafficLight,
		t3 : TrafficLight
	) {
			/* activation of 4 traffic lights that will work together
			 */
		this.activate4(0, 1000)
		t1.activate4(4000, 1000)
		t2.activate4(8000, 1000)
		t3.activate4(12000,1000)
	}
	
}

enum LightColor {
	RED, YELLOW, GREEN
}
