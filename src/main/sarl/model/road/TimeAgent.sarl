/** 
 * 
 */
package model.road

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.Timer
import java.util.TimerTask
import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Event

/** 
 * @author gero_
 * 
 */
agent TimeAgent {
	uses Logging, DefaultContextInteractions
	var timer = new Timer
	val TIME_STEP =1000
	

	on Initialize {
		var task = new TimerTask() {
			@Override
			def run {
				sendEvent
			}
		}
		timer.schedule(task, 0, TIME_STEP)
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Stop the agent")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	def sendEvent {
		var e = new TimeStep
		e.emit
	}
}

event TimeStep extends Event {
	
}
