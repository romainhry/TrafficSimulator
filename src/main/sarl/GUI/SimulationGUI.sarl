package GUI

import fr.utbm.info.ia51.framework.gui.AbstractFrameworkGUI
import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Vector2f
import fr.utbm.info.ia51.framework.time.TimeManager
import fr.utbm.info.ia51.framework.util.LocalizedString
import fr.utbm.info.ia51.framework.util.Resources
import main.MainProgram
import java.awt.Color
import java.awt.Graphics2D
import java.awt.GridLayout
import java.awt.Shape
import java.awt.geom.Line2D
import java.io.Serializable
import java.text.DecimalFormat
import javax.swing.Icon
import javax.swing.ImageIcon
import javax.swing.JCheckBox
import javax.swing.JComponent
import javax.swing.JPanel
import javax.swing.JSlider
/** UI for the rabbits.
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
 

public class SimulationGUI extends AbstractFrameworkGUI {
		/** Size of the direction vector (in pixels).
		 */
	static val DIRECTION_RADIUS = 30f

	static var CAR_ICON : Icon
	
	static var ICON_WIDTH : int
	static var ICON_HEIGHT : int

	static val FAKE = {
		var url = Resources.getResource(typeof(SimulationGUI), "../../car.png") // $NON-NLS-1$
		// TODO assert(url!=null)
		CAR_ICON = new ImageIcon(url)
		ICON_WIDTH = CAR_ICON.iconWidth
		ICON_HEIGHT = CAR_ICON.iconHeight
		null
	}

	var showIcons : JCheckBox
	var showPositions : JCheckBox
	/**
	 * @param worldWidth
	 * @param worldHeight
	 * @param timeManager
	 */
	new (worldWidth : float, worldHeight : float, timeManager : TimeManager) {
		super(LocalizedString::getString(typeof(MainProgram), "PROGRAM_NAME"), // $NON-NLS-1$
		worldWidth, worldHeight, Resources::getResource(typeof(SimulationGUI), "icon.png"), //$NON-NLS-1$
				timeManager)
	}

	override isMouseCursorHidden : boolean {
		// Hide the mouse cursor since a carrot icon is displayed at the same location.
		true
	}

	override createBottomPanel(speedSlider : JSlider, closeButton : JComponent, messageBox : JComponent) : JComponent {
		var bottomPanel = new JPanel
		bottomPanel.layout = new GridLayout(5, 1)
		this.showIcons = new JCheckBox(LocalizedString::getString(this.class, "SHOW_ICONS")) // $NON-NLS-1$
		this.showIcons.addActionListener[repaint]
		this.showIcons.selected = true
		this.showPositions = new JCheckBox(LocalizedString::getString(this.class, "SHOW_POSITIONS")) //$NON-NLS-1$
		this.showPositions.addActionListener[repaint]
		bottomPanel.add(speedSlider)
		bottomPanel.add(this.showIcons)
		bottomPanel.add(this.showPositions)
		bottomPanel.add(closeButton)
		bottomPanel.add(messageBox)
		return bottomPanel
	}
	/** Paint an icon and the orientation.
	 * 
	 * @param g2d the graphical context.
	 * @param icon the icon to draw.
	 * @param position the center position of the icon.
	 * @param orientation the orientation.
	 */
	protected def paintIcon(g2d : Graphics2D, icon : Icon, position : Point2f, orientation : Vector2f) {
		if (orientation !== null) {
			g2d.draw(new Line2D.Float(position.x, position.y, position.x + orientation.x * DIRECTION_RADIUS * 1.5f,
				position.y + orientation.y * DIRECTION_RADIUS * 1.5f));
		}
		icon.paintIcon(this, g2d, position.x as int - ICON_WIDTH / 2, position.y as int - ICON_HEIGHT / 2);
	}

	override paintAgentBody(g2d : Graphics2D, positionOnScreen : Point2f, orientationOnScreen : Vector2f, shape : Shape,
		type : Serializable, name : String, positionInMAS : Point2f, frustum : Shape) {
		var bounds = shape.bounds
		g2d.color = Color::BLUE
		if (this.showIcons.selected) {
			paintIcon(g2d, CAR_ICON, positionOnScreen, orientationOnScreen)
		} else {
			orientationOnScreen.scale(DIRECTION_RADIUS)
			g2d.draw(
				new Line2D.Float(positionOnScreen.x, positionOnScreen.y, positionOnScreen.x + orientationOnScreen.x,
					positionOnScreen.y + orientationOnScreen.y))
			g2d.fill(shape)
		}
		if (this.showPositions.selected) {
			var oldFont = g2d.font
			var f = oldFont.deriveFont(6)
			g2d.color = g2d.background.darker
			g2d.font = f
			var fmt = new DecimalFormat("#.#")
			g2d.drawString(
					"(" + fmt.format(positionInMAS.x) + ";" + fmt.format(positionInMAS.y) + ")",
					bounds.maxX as float + 2, bounds.maxY as float + 2)
			g2d.font = oldFont
		}
	}

	override paintSituatedObject(g2d : Graphics2D, positionOnScreen : Point2f, orientationOnScreen : Vector2f,
		shape : Shape, type : Serializable, name : String, positionInMAS : Point2f) {
		var bounds = shape.bounds
		g2d.color = Color.GREEN

		var icon : Icon

		if (this.showIcons.selected && icon !== null) {
			paintIcon(g2d, icon, positionOnScreen, orientationOnScreen)
		} else {
			g2d.fill(shape)
			if (orientationOnScreen !== null) {
				g2d.color = g2d.background
				var v = orientationOnScreen * Math.max(bounds.width, bounds.height) as float
				g2d.draw(new Line2D.Float(positionOnScreen.x, positionOnScreen.y, positionOnScreen.x + v.x,
					positionOnScreen.y + v.y))
			}
		}
		if (this.showPositions.selected) {
			var oldFont = g2d.font
			var f = oldFont.deriveFont(6)
			g2d.color = g2d.background.darker
			g2d.font = f
			var fmt = new DecimalFormat("#.#")
			g2d.drawString("(" + fmt.format(positionInMAS.x) + ";" + fmt.format(positionInMAS.y) + ")",
					bounds.maxX as float + 2, bounds.maxY as float + 2)
			g2d.font = oldFont
		}
	}

}
