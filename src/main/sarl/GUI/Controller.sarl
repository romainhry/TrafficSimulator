package GUI

import agents.BootEnv
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.ArrayList
import java.util.UUID
import javafx.^event.ActionEvent
import javafx.fxml.FXML
import javafx.scene.Group
import javafx.scene.image.Image
import javafx.scene.image.ImageView
import javafx.scene.layout.Pane
import javafx.scene.paint.Color
import javafx.scene.shape.Polyline
import javafx.scene.shape.StrokeLineJoin
import javafx.application.Platform
import main.TrafficSimulator
import javafx.animation.PauseTransition
import main.Positions
import javafx.util.Duration
import model.road.TrafficLight
import model.road.LightColor
import java.util.Random
import agents.Exit
import model.Graph
import model.Car.CarObject
import java.awt.Desktop
import java.io.File
import java.util.HashMap
import model.road.MaxSpeedSign

class Controller implements EventListener {

	private var id = UUID.randomUUID()

    @FXML
    private var group : Group

	@FXML
	private var carGroup : Group

	private var roadGroup : Group

	private var lightGroup : Group
	
	private var nbCarUpdated : int //use to count cars
    @FXML
    private var PaneHome : Pane
	@FXML
    private var PaneVid : Pane
	@FXML
	private var PaneDesc : Pane
    
	private var ispace : OpenEventSpace

	private var carList = new HashMap<CarObject, ImageView>()
	
	private var imCar :Image//("file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/car.png")
		
	private val imStop = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/stop.png")
		
	private val imLetPrio = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/letPrio.jpg")
		
	private val im90 = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/90.png")

	private val im50 = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/50.png")
		
	private val im30 = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/30.png")
		
		
	private val imTlRedTop = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/redlightTop.png")

	private val imTlRed = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/redlight.png")

	private val imTlRedLeft = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/redlightLeft.png")

	private val imTlRedRight = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/redlightRight.png")

	private val imTlGreenTop = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/greenlightTop.png")

	private val imTlGreen = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/greenlight.png")

	private val imTlGreenLeft = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/greenlightLeft.png")

	private val imTlGreenRight = new Image(
		"file:" + this.getClass().getClassLoader().getResource("").getPath() + "../../Images/greenlightRight.png")	
	
	
	
											
						

	var waiting : long 
    
    new(waitingDuration : long) {
    	waiting = waitingDuration;
    }

	new() {
	}

	public def setGUISpace(ispace : OpenEventSpace) {
		this.ispace = ispace;
		this.ispace.register(this);
	}

	@FXML
	public def start(e : ActionEvent) {
    	/*
    	 *Start spawn the boot agent or let this be the boo agent who's spawning the envAgent
    	 *the car agents    	
			 */
    	Platform.setImplicitExit(false)
    	group.getChildren().clear();
    	   
        for(var i=0; i<25; i++)
        {
        	var tree1 : ImageView
        	if(Math.random()>0.5){
        		tree1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/tree1.png"));
        	}
        	else {
        		tree1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/tree2.png"));
			}
            tree1.setPreserveRatio(true);
            tree1.setFitHeight(60);
            var y : double
            var x = (Math.random() * ( 270 - 100 ))+100;
            tree1.setX(x);
            if(x<180) {
            	y=Math.random() * ( 250 - 175 ) +175;
        	} 	
            else {
            	y=Math.random() * ( 320 - 145 )+145;
			}
            tree1.setY(y);
              
            group.getChildren().add(tree1);
        }
               
        for(var i=0; i<4; i++)
        {
        	var build1 : ImageView;
    		build1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/building.png"));

            build1.setPreserveRatio(true);
            build1.setFitHeight(Math.random() * ( 65 - 40 )+40);
            var y : double
            if(i>=2)
            {
            	y = 320
            }
            else {
            	y = 280
            }
            var x : double
            if(i==1 || i == 3)
            {
            	x = 150
            }
            else {
            	x = 100
            }

            build1.setX(x);
            build1.setY(y);
              
            group.getChildren().add(build1);
        }
        
        for(var i=0; i<2; i++)
        {
        	var build1 : ImageView;
    		build1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/building.png"));

            build1.setPreserveRatio(true);
            build1.setFitHeight(Math.random() * ( 65 - 40 )+40);
            var y= 280 + i*40;
            var x = 20;
            build1.setY(y);
            build1.setX(x);
            group.getChildren().add(build1);
        }
        
        for(var i=0; i<4; i++)
        {
        	var build1 : ImageView;
    		build1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/building.png"));

            build1.setPreserveRatio(true);
            build1.setFitHeight(45);
            var y= 380;
            var x = 20+i*40;
            build1.setY(y);
            build1.setX(x);
            group.getChildren().add(build1);
        }
        
        var build1 : ImageView;
		build1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/building.png"));

        build1.setPreserveRatio(true);
        build1.setFitHeight(45);
        var y= 420;
        var x = 20;
        build1.setY(y);
        build1.setX(x);
        group.getChildren().add(build1);
        
		build1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/house.png"));

        build1.setPreserveRatio(true);
        build1.setFitHeight(30);
        build1.setY(450);
        build1.setX(785);
        group.getChildren().add(build1);
        
        for(var  i=0;i< 5;i++){
        	var house1 : ImageView;
    		house1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/house.png"));

            house1.setPreserveRatio(true);
            house1.setFitHeight(30);
            house1.setY(315+i*20);
            house1.setX(665+i*30);
            group.getChildren().add(house1);
        }
        
        for(var i=0;i< 2;i++){
        	var house1 : ImageView;
    		house1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/house.png"));

            house1.setPreserveRatio(true);
            house1.setFitHeight(30);
            house1.setY(385+i*20);
            house1.setX(695+i*30);
            group.getChildren().add(house1);
        }
        
        for(var i=0;i< 3;i++){
        	var house1 : ImageView;
    		house1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/house.png"));

            house1.setPreserveRatio(true);
            house1.setFitHeight(30);
            house1.setY(430+i*20);
            house1.setX(665+i*30);
            group.getChildren().add(house1);
        }
        
        for(var i=0;i< 4;i++){
        	var house1 : ImageView;
    		house1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/house.png"));

            house1.setPreserveRatio(true);
            house1.setFitHeight(30);
            house1.setY(140);
            house1.setX(650+i*40);
            group.getChildren().add(house1);
        }
        
        for(var i=0;i< 5;i++){
        	var house1 : ImageView;
    		house1 = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/house.png"));

            house1.setPreserveRatio(true);
            house1.setFitHeight(30);
            house1.setY(180);
            house1.setX(650+i*30);
            group.getChildren().add(house1);
        }
        
        
        
        var tennis = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/tennis.png"));
        
        tennis.setPreserveRatio(true);
        tennis.setFitWidth(135);
        tennis.setX(15);
        tennis.setY(480);
        group.getChildren().add(tennis);
        
        var pool = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/pool.png"));
        
        pool.setPreserveRatio(true);
        pool.setFitWidth(220);
        pool.setX(185);
        pool.setY(540);
        group.getChildren().add(pool);
        
        var sm = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/supermarket.jpg"));       
        sm.setPreserveRatio(true);
        sm.setFitWidth(120);
        sm.setX(210);
        sm.setY(470);

        group.getChildren().add(sm);
        
        var mcdo = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/mcdo.png"));       
        mcdo.setPreserveRatio(true);
        mcdo.setFitWidth(100);
        mcdo.setX(380);
        mcdo.setY(465);
        group.getChildren().add(mcdo);
        
        var mairie = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/town-hall.png"));       
        mairie.setPreserveRatio(true);
        mairie.setFitWidth(70);
        mairie.setX(520);
        mairie.setY(320);
        group.getChildren().add(mairie);
        
        var fountain = new ImageView(new Image("file:"+this.getClass().getClassLoader().getResource("").getPath()+"../../Images/fountain.png"));       
        fountain.setPreserveRatio(true);
        fountain.setFitWidth(38);
        fountain.setX(615);
        fountain.setY(370);
        group.getChildren().add(fountain);
        
        //group.getChildren().add(imageVille1);
        TrafficSimulator.myStage.setWidth(1200);
        TrafficSimulator.myStage.setX(0);
		roadGroup = new Group()
		group.getChildren.add(roadGroup)
        carGroup = new Group()
        group.getChildren.add(carGroup)
        lightGroup = new Group()
		group.getChildren.add(lightGroup)
        BootEnv.main(this);
        
    	
    }

	@FXML
	public def Desc ( e : ActionEvent ){
    	PaneHome.setVisible(false);
    	PaneDesc.setVisible(true);
    	try{
		var d = Desktop.getDesktop();
		d.open(new File("../../rapport.docx"));
		}catch (exp : Exception){
			System.out.println(exp);
		}
    }

	@FXML
	public def Video (e : ActionEvent  ){
    	PaneHome.setVisible(false);
    	PaneVid.setVisible(true);
    }

	@FXML
	public def ReturnHome ( e : ActionEvent ){
    	PaneHome.setVisible(true);
    	PaneVid.setVisible(false);
    	PaneDesc.setVisible(false);
    	//group.getChildren().remove(drawingTrain);
    	//group.getChildren().remove(drawingTrain);
    }
   
    
    
	public def listenAndDraw(graph : Graph) {
		val wait : PauseTransition = new PauseTransition(Duration.seconds(0.03));
		
		//var n : int 
		
		wait.setOnFinished [ e |
			try {
								
				var nodes = graph.getNodes
				for (var n = 0; n < nodes.size; n++) {
					var node = nodes.get(n)
				//----------------------------------------------------------------------------------------//
				// -------------------------If road is not on the GUI : create it ------------------------//
				//----------------------------------------------------------------------------------------//
					if (!graph.isCreated) {
						var p = node.getUI
						p.setStrokeLineJoin(StrokeLineJoin.ROUND)
						p.setStrokeWidth(15)
				
						p.setStroke(Color.web("#424242", 1))
						
						var objs = node.getPosObj
					
						for(var j =0;j<objs.size;j++)
						{
							if(objs.get(j) instanceof MaxSpeedSign) 
							{
								var sign = objs.get(j) as MaxSpeedSign
								var signView : ImageView
								if ((objs.get(j) as MaxSpeedSign).getMaxSpeed == 30)
									signView = new ImageView(im30)
								else if((objs.get(j) as MaxSpeedSign).getMaxSpeed == 50)
									signView = new ImageView(im50)
								else
									signView = new ImageView(im90)
								signView.setPreserveRatio(true);
								signView.setFitHeight(20);
								if (node.vert) {
									if (node.getUI().getPoints.get(1) < node.getUI().getPoints.get(3)) {				
										signView.setY(node.getUI().getPoints.get(1) + sign.getPosition.getX);
										signView.setX(node.getUI().getPoints.get(0) - sign.getPosition.getY - 14);
										signView.setRotate(180)
									} else {
										signView.setY(node.getUI().getPoints.get(1) - sign.getPosition.getX);
										signView.setX(node.getUI().getPoints.get(0) + sign.getPosition.getY-5);
																				
									}								
								} else {
									if (node.getUI().getPoints.get(0) < node.getUI().getPoints.get(2)) {
										signView.setX(node.getUI().getPoints.get(0) + sign.getPosition.getX);
										signView.setY(node.getUI().getPoints.get(1) + sign.getPosition.getY-4);
										signView.setRotate(90)
									} else {
										signView.setX(node.getUI().getPoints.get(0) - sign.getPosition.getX);
										signView.setY(node.getUI().getPoints.get(1) - sign.getPosition.getY - 15);
										signView.setRotate(-90)
									}
								}
								roadGroup.getChildren().add(signView)
							}
						}
						
						roadGroup.getChildren().add(p)
						if (n == nodes.size - 1) {
							graph.created()
						}
						
					}
					var objs = node.getPosObj
					
					for(var j =0;j<objs.size;j++)
					{			
						if (objs.get(j) instanceof CarObject) {
						
							//System.out.println("one is a car")
							var car = objs.get(j) as CarObject
							//if(car.getInfluenceDone){
	//----------------------------------------------------------------------------------------//
	// ---------------------------------CAR already on the GUI -------------------------------//
	//----------------------------------------------------------------------------------------//
							var carView : ImageView			
							if (carList.containsKey(car)) { // already on graph
								//System.out.println("should not be here")
								carView = carList.get(car)
	//---------------------------------------------------------------------------------------- //
	// ----------------------------ELSE we should create a new Image --------------------------//
	//---------------------------------------------------------------------------------------- //
							} else {
								System.out.println("here")
								
								var rnd = new Random
								var str : String
								if (nbCarUpdated > 10) {
									switch i=rnd.nextInt(100) {
										case i < 70:
											str = "car"
										case i < 80:
									str = "car2.png"
										default:
											str = "car3"
									}
								} else {
									str = "car"
							   }
								imCar = new Image("file:" + this.getClass().getClassLoader().getResource("").getPath() +
										"../../Images/" + str + ".png")
								carView = new ImageView(imCar)
									carView.setPreserveRatio(true)
								carView.setFitWidth(12)
								carList.put(car, carView)
								carGroup.getChildren().add(carView);			
							}

							if (node.vert) {
								if (node.getUI().getPoints.get(1) < node.getUI().getPoints.get(3)) {
									carView.setY(node.getUI().getPoints.get(1) + car.getPosition.getX - 10);
									carView.setX(node.getUI().getPoints.get(0) - 5);
									carView.setRotate(0)			
								} else {
									carView.setY(node.getUI().getPoints.get(1) - car.getPosition.getX - 8);
									carView.setX(node.getUI().getPoints.get(0) - 5);
									carView.setRotate(180)
									
								}

							} else {
								if (node.getUI().getPoints.get(0) < node.getUI().getPoints.get(2)) {
									carView.setX(node.getUI().getPoints.get(0) + car.getPosition.getX);
									carView.setY(node.getUI().getPoints.get(1) - 4)
									carView.setRotate(-90)
								} else {
									carView.setX(node.getUI().getPoints.get(0) - car.getPosition.getX);
									carView.setY(node.getUI().getPoints.get(1) - 4)
									carView.setRotate(90)
								}
								
							}							
						}
					//----------------------------------------------------------------------------------------//
					// ----------------------Draw only trafficlight when the light has change-----------------//
					//----------------------------------------------------------------------------------------//
										
						if (objs.get(j) instanceof TrafficLight) {
							//System.out.println("one is a light")
							var light = objs.get(j) as TrafficLight
							if (light.getState) {
								var lightView : ImageView
								if (light.getColor == LightColor.RED)
									lightView = new ImageView(imTlRed)
								else
									lightView = new ImageView(imTlGreen)
								lightView.setPreserveRatio(true);
								lightView.setFitHeight(20);
								
								if (node.vert) {
									if (node.getUI().getPoints.get(1) < node.getUI().getPoints.get(3)) {
										lightView.setY(node.getUI().getPoints.get(1) + light.getPosition.getX-28);
										lightView.setX(node.getUI().getPoints.get(0) - light.getPosition.getY - 5 );
										lightView.setRotate(180)
									}
									else {
										lightView.setY(node.getUI().getPoints.get(1) - light.getPosition.getX+6);
										lightView.setX(node.getUI().getPoints.get(0) + light.getPosition.getY-9);
									}				
								}
								else {
									if (node.getUI().getPoints.get(0) < node.getUI().getPoints.get(2)) {
										lightView.setX(node.getUI().getPoints.get(0) + light.getPosition.getX -24);
										lightView.setY(node.getUI().getPoints.get(1) + light.getPosition.getY -11);
										lightView.setRotate(90)
									} else {
										lightView.setX(node.getUI().getPoints.get(0) - light.getPosition.getX +11);
										lightView.setY(node.getUI().getPoints.get(1) - light.getPosition.getY - 7);
										lightView.setRotate(-90)
									}
								}
								lightGroup.getChildren().add(lightView);
								light.setState(false)
							}			
						}
						
					}

				}			
			} catch (exception : Exception) {
				System.out.println(exception.getMessage)
			}	 
			wait.playFromStart();
		];
		wait.play();
	}
	
	
	
	public def cleanExit() {
			if (this.ispace !== null)
				this.ispace.emit(new Exit());
		}

	override public def getID() :UUID {
		return this.id;
	}

	@Override
	public def receiveEvent(ievent : Event) {
	}
   
}