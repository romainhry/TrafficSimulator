package GUI

import agents.BootEnv
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import java.util.ArrayList
import java.util.UUID
import javafx.^event.ActionEvent
import javafx.fxml.FXML
import javafx.scene.Group
import javafx.scene.image.Image
import javafx.scene.image.ImageView
import javafx.scene.layout.Pane
import javafx.scene.paint.Color
import javafx.scene.shape.Polyline
import javafx.scene.shape.StrokeLineJoin
import javafx.application.Platform
import main.TrafficSimulator
import javafx.animation.PauseTransition
import main.Positions
import javafx.util.Duration
import model.road.TrafficLight
import model.road.LightColor
import java.util.Random
import agents.Exit
import model.Graph
import model.Car.CarObject
import java.awt.Desktop
import java.io.File
import java.util.HashMap
import model.road.MaxSpeedSign
import model.road.StopSign
import javafx.scene.media.MediaView
import javafx.scene.media.Media
import javafx.scene.media.MediaPlayer

class Controller implements EventListener {
	
	private var id = UUID.randomUUID()

    @FXML
    private var group : Group

	@FXML
	private var carGroup : Group
	@FXML
	private var roadGroup : Group
	@FXML
	private var lightGroup : Group
	
	private var nbCarUpdated : int //use to count cars
    @FXML
    private var PaneHome : Pane
	@FXML
    private var PaneVid : Pane
	@FXML
	private var PaneDesc : Pane
	@FXML
	private var media_view : MediaView
    
	private var ispace : OpenEventSpace

	private var carList = new HashMap<CarObject, ImageView>()
	
	private var imCar :Image//(this.getClass().getResource(" "/Images/car.png")
		
	private val imStop = new Image(this.getClass().getResource("/Images/stop.png").toString())
		
		
	private val im90 = new Image(
		this.getClass().getResource("/Images/90.png").toString())

	private val im50 = new Image(
		this.getClass().getResource("/Images/50.png").toString)
		
	private val im30 = new Image(
		this.getClass().getResource("/Images/30.png").toString)
		

	private val imTlRed = new Image(
		this.getClass().getResource("/Images/redlight.png").toString)

	private val imTlGreen = new Image(
		this.getClass().getResource("/Images/greenlight.png").toString)
	
	
	
	
											
						

	var waiting : long 
    
    new(waitingDuration : long) {
    	waiting = waitingDuration;
    }

	new() {
	}

	public def setGUISpace(ispace : OpenEventSpace) {
		this.ispace = ispace;
		this.ispace.register(this);
	}
	
	@FXML
	public def start(e : ActionEvent) {
    	/*
    	 *Start spawn the boot agent or let this be the boo agent who's spawning the envAgent
    	 *the car agents    	
			 */
    	Platform.setImplicitExit(false)
    	group.getChildren().clear();


		val imVille = new Image(this.getClass().getResource("/Images/ville.png").toString)

		var imTree1 = new Image(
			this.getClass().getResource("/Images/tree1.png").toString)
		var imTree2 = new Image(
			this.getClass().getResource("/Images/tree2.png").toString)

		var imBuilding = new Image(
			this.getClass().getResource("/Images/building.png").toString)
		var imHouse = new Image(
			this.getClass().getResource("/Images/house.png").toString)
					
		var ville1 = new ImageView(imVille)
		ville1.setPreserveRatio(true);
		ville1.setFitWidth(50);
		ville1.setY(125);
		ville1.setX(365);
		ville1.setRotate(90)
		group.getChildren().add(ville1);

		var ville2 = new ImageView(imVille)
		ville2.setPreserveRatio(true);
		ville2.setFitWidth(50);
		ville2.setY(340);
		ville2.setX(365);
		ville2.setRotate(90)
		group.getChildren().add(ville2);
    	
        for(var i=0; i<35; i++)
        {
        	var tree1 : ImageView
        	if(Math.random()>0.3){
        		tree1 = new ImageView(imTree1);
        	}
        	else {
        		tree1 = new ImageView(imTree2);
			}
            tree1.setPreserveRatio(true);
            tree1.setFitHeight(60);
            var y : double
            var x = (Math.random() * ( 1200 - 840 ))+840;
            tree1.setX(x);
            if(x<1030) {
            	y=Math.random() * ( 240 - 140 ) +140;
        	} 	
            else {
            	y=Math.random() * ( 440 - 140 )+140;
			}
            tree1.setY(y);
              
            group.getChildren().add(tree1);
        }

		for (var i = 0; i < 20; i++) {
			var tree1 : ImageView
			if (Math.random() > 0.7) {
				tree1 = new ImageView(imTree1)
			} else {
				tree1 = new ImageView(imTree2)
			}
			tree1.setPreserveRatio(true)
			tree1.setFitHeight(60)

			tree1.setX(Math.random() * 430 - 30)

			tree1.setY(Math.random() * ( 630 - 400 ) + 400)

			group.getChildren().add(tree1)
		}
          
      	          
        for(var i=0; i<12; i++)
        {
        	var build1 : ImageView;
    		build1 = new ImageView(imBuilding);
            build1.setPreserveRatio(true);
            build1.setFitHeight(Math.random() * ( 65 - 40 ) + 40);
			var x = 640 
            var y =60
            if(i>=3)
            {
            	y = 110
            }
            if(i>=6) {
            	y = 155
            }
            if(i>=9)
            {
				y = 200
            }

            
            x += (i % 3) * 65
			build1.setX(x);
			build1.setY(y);
              
            group.getChildren().add(build1);
        }
        
        
        
        for(var  i=0;i< 30;i++){
        	var house1 : ImageView;
    		house1 = new ImageView(imHouse);

            house1.setPreserveRatio(true);
            house1.setFitHeight(30);
            var y = 530
            if(i>15)
        		y = 565
            house1.setY(y);
            house1.setX(630 + (i % 15) * 40);
            group.getChildren().add(house1);
        }

		for (var i = 0; i < 8; i++) {
			var house1 : ImageView;
			house1 = new ImageView(imHouse);

			house1.setPreserveRatio(true);
			house1.setFitHeight(30);
			var y = 330
			if (i >= 4)
				y = 445
			house1.setY(y);
			house1.setX(675 + (i % 4) * 80);
			group.getChildren().add(house1);
		}
        

        
        
        
        
        var tennis = new ImageView(new Image(this.getClass().getResource("/Images/tennis.png").toString))
        
        tennis.setPreserveRatio(true);
        tennis.setFitWidth(135);
        tennis.setX(480);
        tennis.setY(500);
        group.getChildren().add(tennis);
        
        var pool = new ImageView(new Image(this.getClass().getResource("/Images/pool.png").toString))
        
        pool.setPreserveRatio(true);
        pool.setFitWidth(220);
        pool.setX(60);
        pool.setY(310);
        group.getChildren().add(pool);
        
        var sm = new ImageView(new Image(this.getClass().getResource("/Images/supermarket.jpg").toString))       
        sm.setPreserveRatio(true);
        sm.setFitWidth(120);
        sm.setX(430);
        sm.setY(230);

        group.getChildren().add(sm);
        
        var mcdo = new ImageView(new Image(this.getClass().getResource("/Images/mcdo.png").toString))       
        mcdo.setPreserveRatio(true);
        mcdo.setFitWidth(100);
        mcdo.setX(440);
        mcdo.setY(17);
        group.getChildren().add(mcdo);
        
        var mairie = new ImageView(new Image(this.getClass().getResource("/Images/town-hall.png").toString));       
        mairie.setPreserveRatio(true);
        mairie.setFitWidth(70);
        mairie.setX(520);
        mairie.setY(320);
        group.getChildren().add(mairie);
        
        var fountain = new ImageView(new Image(this.getClass().getResource("/Images/fountain.png").toString))       
        fountain.setPreserveRatio(true);
        fountain.setFitWidth(50);
        fountain.setX(795);
        fountain.setY(375);
        group.getChildren().add(fountain);
      
        //group.getChildren().add(imageVille1);
        TrafficSimulator.myStage.setWidth(1200);
        TrafficSimulator.myStage.setX(0);
		roadGroup = new Group()
		group.getChildren.add(roadGroup)
        carGroup = new Group()
        group.getChildren.add(carGroup)
        lightGroup = new Group()
		group.getChildren.add(lightGroup)
        BootEnv.main(this);
        
    	
    }

	@FXML
	public def Desc ( e : ActionEvent ){
    	PaneHome.setVisible(false);
    	PaneDesc.setVisible(true);
    	try{
		var d = Desktop.getDesktop();
		d.open(new File("../../rapport.docx"));
		}catch (exp : Exception){
			System.out.println(exp);
		}
    }

	@FXML
	public def Video(e : ActionEvent) {
		PaneHome.setVisible(false);
    	PaneVid.setVisible(true);
		val file = new File("vid.mp4");
		val	media = new Media(file.toURI().toString());
		val mediaPlayer = new MediaPlayer(media);
		mediaPlayer.setAutoPlay(true);
		media_view = new MediaView(mediaPlayer);
		media_view.x = 100
		
		//var media = new Media("https://www.youtube.com/watch?v=sW8CYs3Y42o");
		PaneVid.children.add(media_view)
		System.out.println(media_view.mediaPlayer.media.source);
    }

	@FXML
	public def ReturnHome ( e : ActionEvent ){
    	if(PaneVid.children.contains(media_view)){
    		PaneVid.children.remove(media_view)
    		media_view.mediaPlayer.mute = true;
    	}
    	PaneHome.setVisible(true);
    	PaneVid.setVisible(false);
    	PaneDesc.setVisible(false);
    	//group.getChildren().remove(drawingTrain);
    	//group.getChildren().remove(drawingTrain);
    }
   
    
    
	public def listenAndDraw(graph : Graph) {
		val wait : PauseTransition = new PauseTransition(Duration.seconds(0.03));
		
		//var n : int 
		
		wait.setOnFinished [ e |
			try {
								
				var nodes = graph.getNodes
				for (var n = 0; n < nodes.size; n++) {
					var node = nodes.get(n)
				//----------------------------------------------------------------------------------------//
				// -------------------------If road is not on the GUI : create it ------------------------//
				//----------------------------------------------------------------------------------------//
					if (!graph.isCreated) {
						var p = node.getUI
						p.setStrokeLineJoin(StrokeLineJoin.ROUND)
						p.setStrokeWidth(15)
				
						p.setStroke(Color.web("#424242", 1))
						
						var objs = node.getPosObj
					
						for(var j =0;j<objs.size;j++)
						{
							if(objs.get(j) instanceof MaxSpeedSign) 
							{
								var sign = objs.get(j) as MaxSpeedSign
								var signView : ImageView
								if ((objs.get(j) as MaxSpeedSign).getMaxSpeed == 30)
									signView = new ImageView(im30)
								else if((objs.get(j) as MaxSpeedSign).getMaxSpeed == 50)
									signView = new ImageView(im50)
								else
									signView = new ImageView(im90)
								signView.setPreserveRatio(true);
								signView.setFitHeight(20);
								if (node.vert) {
									if (node.getUI().getPoints.get(1) < node.getUI().getPoints.get(3)) {				
										signView.setY(node.getUI().getPoints.get(1) + sign.getPosition.getX);
										signView.setX(node.getUI().getPoints.get(0) - sign.getPosition.getY - 14);
										signView.setRotate(180)
									} else {
										signView.setY(node.getUI().getPoints.get(1) - sign.getPosition.getX);
										signView.setX(node.getUI().getPoints.get(0) + sign.getPosition.getY-5);
																				
									}								
								} else {
									if (node.getUI().getPoints.get(0) < node.getUI().getPoints.get(2)) {
										signView.setX(node.getUI().getPoints.get(0) + sign.getPosition.getX);
										signView.setY(node.getUI().getPoints.get(1) + sign.getPosition.getY-4);
										signView.setRotate(90)
									} else {
										signView.setX(node.getUI().getPoints.get(0) - sign.getPosition.getX);
										signView.setY(node.getUI().getPoints.get(1) - sign.getPosition.getY - 15);
										signView.setRotate(-90)
									}
								}
								roadGroup.getChildren().add(signView)
								
							}
							if(objs.get(j) instanceof StopSign) 
							{
								var signView = new ImageView(imStop)
								signView.setPreserveRatio(true);
								signView.setFitHeight(20);
								signView.setX(node.getUI().getPoints.get(0) + objs.get(j).getPosition.getY-10);
								signView.setY(node.getUI().getPoints.get(1) - objs.get(j).getPosition.getX + 10);
								roadGroup.getChildren().add(signView)
							}
						}														
						roadGroup.getChildren().add(p)
						if (n == nodes.size - 1) {
							graph.created()
						}
						
					}
					var objs = node.getPosObj
					
					for(var j =0;j<objs.size;j++)
					{			
						if (objs.get(j) instanceof CarObject) {
						
							//System.out.println("one is a car")
							var car = objs.get(j) as CarObject
							//if(car.getInfluenceDone){
	//----------------------------------------------------------------------------------------//
	// ---------------------------------CAR already on the GUI -------------------------------//
	//----------------------------------------------------------------------------------------//
							var carView : ImageView			
							if (carList.containsKey(car)) { // already on graph
								//System.out.println("should not be here")
								carView = carList.get(car)
	//---------------------------------------------------------------------------------------- //
	// ----------------------------ELSE we should create a new Image --------------------------//
	//---------------------------------------------------------------------------------------- //
							} else {
								System.out.println("here")
								
								var rnd = new Random
								var str : String
								if (nbCarUpdated > 10) {
									switch i=rnd.nextInt(100) {
										case i < 70:
											str = "car"
										case i < 80:
									str = "car2.png"
										default:
											str = "car3"
									}
								} else {
									str = "car"
							   }
								if (car.getIsPlayer) {
									imCar = new Image(this.getClass().getResource("/Images/carPlayer.png").toString)
								}
							   else {
									imCar = new Image(this.getClass().getResource("./mages/" + str + ".png").toString)
							   }

								carView = new ImageView(imCar)
									carView.setPreserveRatio(true)
								carView.setFitWidth(14)
								carList.put(car, carView)
								carGroup.getChildren().add(carView);			
							}

							if (node.vert) {
								if (node.getUI().getPoints.get(1) < node.getUI().getPoints.get(3)) {
									carView.setY(node.getUI().getPoints.get(1) + car.getPosition.getX - 10);
									carView.setX(node.getUI().getPoints.get(0) - 5);
									carView.setRotate(0)			
								} else {
									carView.setY(node.getUI().getPoints.get(1) - car.getPosition.getX - 8);
									carView.setX(node.getUI().getPoints.get(0) - 5);
									carView.setRotate(180)
									
								}

							} else {
								if (node.getUI().getPoints.get(0) < node.getUI().getPoints.get(2)) {
									carView.setX(node.getUI().getPoints.get(0) + car.getPosition.getX);
									carView.setY(node.getUI().getPoints.get(1) - 5)
									carView.setRotate(-90)
								} else {
									carView.setX(node.getUI().getPoints.get(0) - car.getPosition.getX);
									carView.setY(node.getUI().getPoints.get(1) - 5)
									carView.setRotate(90)
								}
								
							}							
						}
					//----------------------------------------------------------------------------------------//
					// ----------------------Draw only trafficlight when the light has change-----------------//
					//----------------------------------------------------------------------------------------//
										
						if (objs.get(j) instanceof TrafficLight) {
							//System.out.println("one is a light")
							var light = objs.get(j) as TrafficLight
							if (light.getState) {
								var lightView : ImageView
								if (light.getColor == LightColor.RED)
									lightView = new ImageView(imTlRed)
								else
									lightView = new ImageView(imTlGreen)
								lightView.setPreserveRatio(true);
								lightView.setFitHeight(20);
								
								if (node.vert) {
									if (node.getUI().getPoints.get(1) < node.getUI().getPoints.get(3)) {
										lightView.setY(node.getUI().getPoints.get(1) + light.getPosition.getX-28);
										lightView.setX(node.getUI().getPoints.get(0) - light.getPosition.getY - 5 );
										lightView.setRotate(180)
									}
									else {
										lightView.setY(node.getUI().getPoints.get(1) - light.getPosition.getX+6);
										lightView.setX(node.getUI().getPoints.get(0) + light.getPosition.getY-9);
									}				
								}
								else {
									if (node.getUI().getPoints.get(0) < node.getUI().getPoints.get(2)) {
										lightView.setX(node.getUI().getPoints.get(0) + light.getPosition.getX -24);
										lightView.setY(node.getUI().getPoints.get(1) + light.getPosition.getY -11);
										lightView.setRotate(90)
									} else {
										lightView.setX(node.getUI().getPoints.get(0) - light.getPosition.getX +11);
										lightView.setY(node.getUI().getPoints.get(1) - light.getPosition.getY - 7);
										lightView.setRotate(-90)
									}
								}
								lightGroup.getChildren().add(lightView);
								light.setState(false)
							}			
						}
						
					}


				}			
			} catch (exception : Exception) {
				System.out.println(exception.getMessage)
			}	 
			wait.playFromStart();
		];
		wait.play();
	}
	
	
	
	public def cleanExit() {
			if (this.ispace !== null)
				this.ispace.emit(new Exit());
		}

	override public def getID() :UUID {
		return this.id;
	}

	@Override
	public def receiveEvent(ievent : Event) {
	}
   
}