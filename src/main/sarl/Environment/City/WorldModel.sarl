/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package Environment.City

import fr.utbm.info.ia51.framework.environment.AbstractEnvironment
import fr.utbm.info.ia51.framework.environment.AgentBody
import fr.utbm.info.ia51.framework.environment.DynamicType
import fr.utbm.info.ia51.framework.environment.Influence
import fr.utbm.info.ia51.framework.environment.MotionInfluence
import fr.utbm.info.ia51.framework.environment.Percept
import fr.utbm.info.ia51.framework.environment.SituatedObject
import fr.utbm.info.ia51.framework.gui.WorldModelStateProvider
import fr.utbm.info.ia51.framework.math.Circle2f
import fr.utbm.info.ia51.framework.math.MathUtil
import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Rectangle2f
import fr.utbm.info.ia51.framework.math.Shape2f
import fr.utbm.info.ia51.framework.math.Vector2f
import fr.utbm.info.ia51.framework.time.StepTimeManager
import fr.utbm.info.ia51.framework.time.TimeManager
import fr.utbm.info.ia51.framework.util.CollectionUtil
import fr.utbm.info.ia51.framework.util.LocalizedString
//import fr.utbm.info.ia51.general.frustum.CircleFrustum
import java.util.ArrayList
import java.util.Collection
import java.util.List
import java.util.UUID

/**
 * Model of the world.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class WorldModel extends AbstractEnvironment implements WorldModelStateProvider {

	static val CAR_SIZE = 20f
	
	
	var graph : Graph
	
	/**
	 * @param width is the width of the world.
	 * @param height is the height of the world.
	 */
	new (width : float, height : float) {
		super(width, height, new StepTimeManager(500))
		this.graph = new Graph()
	}
	

	override computePerceptionsFor(^agent : AgentBody) : List<Percept> {
		var allPercepts = new ArrayList<Percept>
		var list = this.graph.getNodes
		for (l : list) {
			for (n : l.getPosObj) {
				if (n != ^agent) {
					allPercepts += new Percept(n);
				}
				allPercepts += new Percept(n)
			}
		}
		return allPercepts
	}

	override applyInfluences(motionInfluences : Collection<MotionInfluence>,
			otherInfluences : Collection<Influence>, timeManager : TimeManager) {

		var actions = new ArrayList<AnimatAction>(motionInfluences.size());
		for (index1 : 0 ..< motionInfluences.size) {
			var inf1 = motionInfluences.get(index1)
			var body1 = getAgentBodyFor(inf1.emitter)
			var move : Vector2f
			var rotation : float
			move = body1.computeKinematicTranslation(inf1.linearInfluence, timeManager)
			rotation = body1.computeKinematicRotation(inf1.angularInfluence, timeManager)
			
			actions += new AnimatAction(body1, move, rotation)
	
		}

		// Apply the actions
		for(action : actions) {
			var body = action.objectToMove
			if (body !== null) {
				body.move(action.translation,  action.rotation)
			}
		}
	}

	private def trivialCollisionDetection(index1 : int, influenceList : List<MotionInfluence>,
			body1Bounds : Shape2f<?>, move : Vector2f) {
		for (index2 : (index1 + 1)..<influenceList.size) {
			var inf2 = influenceList.get(index2)
			var body2 = getAgentBodyFor(inf2.emitter)
			if (body2 !== null) {
				val body2Bounds = body2.shape
				if (body1Bounds.intersects(body2Bounds)) {
					move.set(0,0)
					return
				}
			}
		}
	}

	def getAllObjects : Iterable<? extends SituatedObject> {
		return this.agentBodies
	}

	protected def computeEndogenousBehaviorInfluences : List<Influence> {
		emptyList
	}
	
	/** Create the body of a rabbit.
	 */
	def createRabbit {
		var id = UUID::randomUUID
		var frustum = new CircleFrustum(id, 10 * CAR_SIZE)
		var body = new AgentBody(
				id,
				new Circle2f(0f, 0f, CAR_SIZE), // body
				5f,						// max linear speed m/s
				0.5f,						// max linear acceleration (m/s)/s
				MathUtil.PI/4f,				// max angular speed r/s
				MathUtil.PI/10f,			// max angular acceleration (r/s)/s
				frustum) // FIXME
		body.name = LocalizedString::getString(typeof(WorldModel), "RABBIT", this.agentBodyNumber + 1)
		addAgentBody(
				body,
				randomPosition,
				Math::random as float * MathUtil.TWO_PI)
	}
	
	protected def randomPosition : Point2f {
		var x = Math::random as float * this.width - CAR_SIZE
		var y = Math.random() as float * this.height - CAR_SIZE
		return new Point2f(x, y)
	}

	override onAgentBodyCreated(body : AgentBody) {
		this.graph.add(body);
	}

	override onAgentBodyDestroyed(body : AgentBody) {
		//
	}
	
	/**
	 * Real action to apply in the world.
	 * 
	 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
	 * @version $Name$ $Revision$ $Date$
	 */
	private static class AnimatAction {

		val body : AgentBody
		val move : Vector2f 
		val rotation : float 
		
		/**
		 * @param object is the animat body.
		 * @param move is the translation.
		 * @param rotation is the rotation.
		 */
		new (object : AgentBody, move : Vector2f, rotation : float) {
			this.body = object
			this.move = move
			this.rotation = rotation
		}
		
		/** Replies the moved object.
		 * 
		 * @return the moved object.
		 */
		def getObjectToMove : AgentBody {
			this.body
		}
		
		/** Replies the translation.
		 * 
		 * @return the translation.
		 */
		def getTranslation : Vector2f {
			this.move
		}
		
		/** Replies the rotation.
		 * 
		 * @return the rotation.
		 */
		def getRotation : float {
			this.rotation
		}

	}
	
}