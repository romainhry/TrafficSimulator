/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.math

import static extension java.lang.Math.*

/** Mathematic and geometric utilities.
 *
 * Copied from {@link https://github.com/gallandarakhneorg/afc/}.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
final class MathUtil {
	
	private new() {
	}

	/** PI
	 */
	public static val PI = Math::PI as float

	/** E
	 */
	public static val E = Math::E as float

	/** Epsilon value, smallest such that 1.0+EPSILON != 1.0
	 * <p>
	 * Given by the Java3D's implementation of the Matrix3d class.
	 */
	public static val EPSILON = 1.110223024E-16 as float

	/** 2 * PI
	 */
	public static val TWO_PI = (2.0 * Math::PI) as float

	/**
	 * Compute the signed angle between two vectors.
	 * 
	 * @param x1
	 * @param y1
	 * @param x2
	 * @param y2
	 * @return the angle between <code>-PI</code> and <code>PI</code>.
	 */
	static def signedAngle(x1 : float, y1 : float, x2 : float, y2 : float) : float {
		var length1 = (x1 * x1 + y1 * y1).sqrt as float
		var length2 = (x2 * x2 + y2 * y2).sqrt as float

		if ((length1 == 0f) || (length2 == 0f))
			return Float.NaN

		var cx1 = x1
		var cy1 = y1
		var cx2 = x2
		var cy2 = y2

		// A and B are normalized
		if (length1 != 1f) {
			cx1 /= length1
			cy1 /= length1
		}

		if (length2 != 1f) {
			cx2 /= length2
			cy2 /= length2
		}

		/*
		 * // First method // Angle // A . B = |A|.|B|.cos(theta) = cos(theta) float dot = x1 * x2 + y1 * y2; float angle = Math.acos(dot);
		 * 
		 * // On which side of A, B is located? if ((dot > -1) && (dot < 1)) { dot = MathUtil.determinant(x2, y2, x1, y1); if (dot < 0) angle = -angle; }
		 */

		// Second method
		// A . B = |A|.|B|.cos(theta) = cos(theta)
		var cos = cx1 * cx2 + cy1 * cy2
		// A x B = |A|.|B|.sin(theta).N = sin(theta) (where N is the unit vector perpendicular to plane AB)
		var sin = cx1 * cy2 - cy1 * cx2

		var angle = atan2(sin, cos) as float

		return angle
	}

	/** Clamp the given angle in radians to {@code [0;2PI)}.
	 * 
	 * @param radians is the angle to clamp
	 * @return the angle in {@code [0;2PI)} range.
	 */
	static def clampRadian(radians : float) : float {
		clampRadian(radians, 0f, TWO_PI)
	}
	
	/** Clamp the given angle in radians.
	 * 
	 * @param radians is the angle to clamp
	 * @param min is the min value of the range.
	 * @param max is the max value of the range.
	 * @return the angle in the given range.
	 */
	static def clampRadian(radians : float, min : float, max : float) : float {
		var r = radians
		while (r < min) r += TWO_PI
		while (r >= max) r -= TWO_PI
		return r
	}

	/** Clamp the given value to the given range.
	 * <p>
	 * If the value is outside the {@code [min;max]}
	 * range, it is clamp to the nearest bounding value
	 * <var>min</var> or <var>max</var>.
	 * 
	 * @param v is the value to clamp.
	 * @param min is the min value of the range.
	 * @param max is the max value of the range.
	 * @return the value in {@code [min;max]} range.
	 */
	static def clamp(v : float, min : float, max : float) : float {
		if (min < max) {
			if (v < min) return min
			if (v > max) return max
		}
		else {
			if (v > min) return min
			if (v < max) return max
		}
		return v
	}

	/** Replies the min value in the given values.
	 *
	 * @return the min value.
	 */
	static def min(values : float*) : float {
		var min = values.get(0)
		for (i : 1 ..< values.length) {
			if (min > values.get(i)) {
				min = values.get(i)
			}
		}
		return min
	}

	/** Replies the max value in the given values.
	 *
	 * @return the max value.
	 */
	static def max(values : float*) : float {
		var max = values.get(0)
		for (i : 1 ..< values.length) {
			if (max < values.get(i)) {
				max = values.get(i)
			}
		}
		return max
	}

	/**
	 * Replies the projection a point on a segment.
	 * 
	 * @param p is the coordinate of the point to project
	 * @param s1 is the x-coordinate of the first line point.
	 * @param s2 is the x-coordinate of the second line point.
	 * @return the projection of the specified point on the line. If 
	 * equal to {@code 0}, the projection is equal to the first segment point. 
	 * If equal to {@code 1}, the projection is equal to the second segment point. 
	 * If inside {@code ]0;1[}, the projection is between the two segment points. 
	 * If inside {@code ]-inf;0[}, the projection is outside on the side of the 
	 * first segment point. If inside {@code ]1;+inf[}, the projection is 
	 * outside on the side of the second segment point.
	 */
	static def projectsPointOnLine(p : Point2f, s1 : Point2f, s2 : Point2f) : float {
		var r_numerator = (p.x - s1.x) * (s2.x - s1.x) + (p.y - s1.y) * (s2.y - s1.y)
		var r_denomenator = (s2.x - s1.x) * (s2.x - s1.x) + (s2.y - s1.y) * (s2.y - s1.y)
		return r_numerator / r_denomenator
	}
	
	private static def determinant(a : Tuple2f<?>, b : Tuple2f<?>) : float {
		a.x * b.y - b.x * a.y
	}
	
	/**
	 * Replies one position factor for the intersection point between two lines.
	 * <p>
	 * Let line equations for L1 and L2:<br>
	 * <code>L1: P1 + factor1 * (P2-P1)</code><br>
	 * <code>L2: P3 + factor2 * (P4-P3)</code><br>
	 * If lines are intersecting, then<br>
	 * <code>P1 + factor1 * (P2-P1) = P3 + factor2 * (P4-P3)</code>
	 * <p>
	 * This function computes and replies <code>factor1</code>.
	 * 
	 * @param p1
	 *            is the coordinates of the first point of the first segment.
	 * @param p2
	 *            is the coordinates of the second point of the first segment.
	 * @param p3
	 *            is the coordinates of the first point of the second segment.
	 * @param p4
	 *            is the coordinates of the second point of the second segment.
	 * @return <code>factor1</code> or {@link Float#NaN} if no intersection.
	 */
	static def getSegmentSegmentIntersectionFactor(p1 : Point2f, p2 : Point2f, p3 : Point2f,
		p4 : Point2f) : float {
		var v1 = p2 - p1
		var v2 = p4 - p3

		// determinant is zero when parallel = det(L1,L2)
		var det = determinant(v1, v2)
		if (det == 0f) return Float.NaN

		// Given line equations:
		// Pa = P1 + ua (P2-P1), and
		// Pb = P3 + ub (P4-P3)
		// and
		// V = (P1-P3)
		// then
		// ua = det(L2,V) / det(L1,L2)
		// ub = det(L1,V) / det(L1,L2)
		var v3 = p1 - p3
		var u = determinant(v1, v3) / det
		if (u < 0.0 || u > 1.0) return Float.NaN
		u = determinant(v2, v3) / det
		return if (u < 0.0 || u > 1.0) Float.NaN else u
	}
	
	/** Compute the distance between a point and a segment.
	 *
	 * @param p position of the point.
	 * @param s1 position of the first point of the segment.
	 * @param s2 position of the second point of the segment.
	 * @return the distance beetween the point and the segment.
	 */
	static def distancePointToSegment(p : Point2f, s1 : Point2f, s2 : Point2f) : float {
		var r_denomenator = (s2.x - s1.x) * (s2.x - s1.x) + (s2.y - s1.y) * (s2.y - s1.y)
		if (r_denomenator==0f) return p.distance(s1)
		var r_numerator = (p.x - s1.x) * (s2.x - s1.x) + (p.y - s1.y) * (s2.y - s1.y)
		var ratio = r_numerator / r_denomenator

		if (ratio <= 0f) {
			return ((p.x - s1.x) * (p.x - s1.x) + (p.y - s1.y) * (p.y - s1.y)).sqrt as float
		}

		if (ratio >= 1f) {
			return ((p.x - s2.x) * (p.x - s2.x) + (p.y - s2.y) * (p.y - s2.y)).sqrt as float
		}

		var s =  ((s1.y - p.y) * (s2.x - s1.x) - (s1.x - p.x) * (s2.y - s1.y) ) / r_denomenator
		return (s.abs * r_denomenator.sqrt) as float
	}
	
	/** Compute the distance between two segments.
	 *
	 * @param p position of the point.
	 * @param s1 position of the first point of the segment.
	 * @param s2 position of the second point of the segment.
	 * @return the distance beetween the segments.
	 */
	static def distanceSegmentToSegment(s1 : Point2f, s2 : Point2f, s3 : Point2f, s4 : Point2f) : float {
		var f = getSegmentSegmentIntersectionFactor(s1, s2, s3, s4)
		if (!Float::isNaN(f)) {
			return 0f
		}
		var d1 = distancePointToSegment(s1, s3, s4)
		var d2 = distancePointToSegment(s2, s3, s4)
		var d3 = distancePointToSegment(s3, s1, s2)
		var d4 = distancePointToSegment(s4, s1, s2)
		return min(d1, d2, d3, d4)
	}

}
