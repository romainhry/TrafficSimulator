/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.util

import java.io.BufferedReader
import java.io.ByteArrayInputStream
import java.io.InputStream
import java.io.InputStreamReader
import java.lang.reflect.Array
import java.nio.ByteBuffer
import java.nio.CharBuffer
import java.nio.charset.CharacterCodingException
import java.nio.charset.Charset
import java.util.List
import java.util.Locale
import java.util.MissingResourceException
import java.util.ResourceBundle

/**
 * This utility class permits a easier use of localized strings.
 * <code>Locale</code> provides a means to retreive
 * messages in the default language. Use this to construct messages
 * displayed for end users.
 * <p>
 * <code>Locale</code> takes a string from a properties resource, 
 * then inserts the parameter strings into the extracted strings
 * at the appropriate places.
 * The pattern matching is proceeded with {@link LocaleMessageFormat}
 * formatter. Note that <code>''</code> may represent a single quote
 * in strings (see {@link LocaleMessageFormat} for details).
 * 
 * FIXME: Does java.text.Normalizer may replace decodeString functions?
 *
 * Copied from {@link https://github.com/gallandarakhneorg/afc/}.
 *
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @author Olivier LAMOTTE &lt;olivier.lamotte@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class LocalizedString {
	
    /**
     * Replies the text that corresponds to the specified resource.
     * <p>
     * The <code>resourcePath</code> argument should be a fully 
     * qualified class name. However, for compatibility with earlier 
     * versions, Sun's Java SE Runtime Environments do not verify this,
     * and so it is possible to access <code>PropertyResourceBundle</code>s
     * by specifying a path name (using "/") instead of a fully 
     * qualified class name (using ".").
     * 
     * @param resourcePath is the name (path) of the resource file, a fully qualified class name
     * @param key is the name of the resource into the specified file
     * @param defaultValue is the default value to replies if the resource does not contain the specified key. 
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getStringWithDefaultFrom(resourcePath : String, key : String,
    	defaultValue : String, params : Object*) : String {
        // This method try to use the plugin manager class loader
        // if it exists, otherwhise, it use the default class loader        
    	return getStringWithDefaultFrom(
    			typeof(LocalizedString).classLoader,
    			resourcePath, key, defaultValue, params);
    }

    /**
     * Replies the text that corresponds to the specified resource.
     * <p>
     * The <code>resourcePath</code> argument should be a fully 
     * qualified class name. However, for compatibility with earlier 
     * versions, Sun's Java SE Runtime Environments do not verify this,
     * and so it is possible to access <code>PropertyResourceBundle</code>s
     * by specifying a path name (using "/") instead of a fully 
     * qualified class name (using ".").
     * 
     * @param classLoader is the class loader to use, a fully qualified class name
     * @param resourcePath is the name (path) of the resource file
     * @param key is the name of the resource into the specified file
     * @param defaultValue is the default value to replies if the resource does not contain the specified key. 
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getStringWithDefaultFrom(classLoader : ClassLoader, resourcePath : String,
    	key : String, defaultValue : String, params : Object*) : String {
        if (resourcePath === null) {
        	return defaultValue
        }
        // Get the resource file
		var resource : ResourceBundle = null
        try {
        	resource = ResourceBundle.getBundle(resourcePath,
            		Locale::getDefault,
            		classLoader)
        } catch (exep : MissingResourceException) {
            return defaultValue
        }
        
        // get the resource string
		var result : String
        
        try {
            result = resource.getString(key)
        } catch (e : Exception) {
            return defaultValue
        }

        // replace the \n and \r by a real new line character
        result = result.replaceAll("[\\n\\r]","\n"); //$NON-NLS-1$ //$NON-NLS-2$
        result = result.replaceAll("\\t","\t"); //$NON-NLS-1$ //$NON-NLS-2$
        
        // replace the parameter values
        // TODO assert(params!=null);
 		LocaleMessageFormat::format(result, params)
    }

    /**
     * Replies the text that corresponds to the specified resource.
     * <p>
     * The <code>resourcePath</code> argument should be a fully 
     * qualified class name. However, for compatibility with earlier 
     * versions, Sun's Java SE Runtime Environments do not verify this,
     * and so it is possible to access <code>PropertyResourceBundle</code>s
     * by specifying a path name (using "/") instead of a fully 
     * qualified class name (using ".").
     * 
     * @param resourcePath is the name (path) of the resource file, a fully qualified class name
     * @param key is the name of the resource into the specified file
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getStringFrom(resourcePath : String, key : String, params : Object*) : String {
    	getStringWithDefaultFrom(resourcePath, key, key, params)
    }
    
    /**
     * Replies the text that corresponds to the specified resource.
     * <p>
     * The <code>resourcePath</code> argument should be a fully 
     * qualified class name. However, for compatibility with earlier 
     * versions, Sun's Java SE Runtime Environments do not verify this,
     * and so it is possible to access <code>PropertyResourceBundle</code>s
     * by specifying a path name (using "/") instead of a fully 
     * qualified class name (using ".").
     *  
     * @param classLoader is the classLoader to use.
     * @param resourcePath is the name (path) of the resource file, a fully qualified class name
     * @param key is the name of the resource into the specified file
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getStringFrom(classLoader : ClassLoader, resourcePath : String, key : String, params : Object*) : String {
    	getStringWithDefaultFrom(classLoader,resourcePath, key, key, params)
    }

    /**
     * Replies the text that corresponds to the specified resource.
     * 
     * @param resource is the name of the resource file
     * @param key is the name of the resource into the specified file
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getString(resource : Class<?>, key : String, params : Object*) : String {
    	getString(resource.classLoader, resource, key, params)
    }
    
    /**
     * Replies the text that corresponds to the specified resource.
     * 
     * @param classLoader is the class loader to use.
     * @param resource is the name of the resource file
     * @param key is the name of the resource into the specified file
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getString(classLoader : ClassLoader, resource : Class<?>, key : String, params : Object*) : String {
    	var res = resource
    	if (res === null) {
    		return key
    	}
    	var ^val = getStringWithDefaultFrom(classLoader, res.canonicalName, key, null, params)
    	if (^val === null && classLoader != res.classLoader) {
    		^val = getStringWithDefaultFrom(classLoader, res.canonicalName, key, null, params)
    	}
    	while ((res !== null) && (^val === null)) {
    		res = res.superclass
    		if (res !== null) {
    			^val = getStringWithDefaultFrom(classLoader, res.canonicalName, key, null, params)
    		}
    	}    	
    	if (^val === null) {
    		return key
    	}
    	return ^val
    }

    /**
     * Replies the text that corresponds to the specified resource.
     * 
     * @param resource is the name of the resource file
     * @param key is the name of the resource into the specified file
     * @param defaultValue is the default value to replies if the resource does not contain the specified key. 
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getStringWithDefault(resource : Class<?>, key : String, defaultValue : String,
		params : Object*) : String {
    	getStringWithDefault(resource.classLoader, resource, key, defaultValue, params)
    }

    /**
     * Replies the text that corresponds to the specified resource.
     * 
     * @param classLoader is the class loader to use.
     * @param resource is the name of the resource file
     * @param key is the name of the resource into the specified file
     * @param defaultValue is the default value to replies if the resource does not contain the specified key. 
     * @param params is the the list of parameters which will
     * replaces the <code>#1</code>, <code>#2</code>... into the string.
     * @return the text that corresponds to the specified resource
     */
    static def getStringWithDefault(classLoader : ClassLoader, resource : Class<?>,
    		key : String, defaultValue : String, params : Object*) : String {
    	var res = resource
    	if (res === null) {
    		return defaultValue
    	}
    	var ^val = getStringWithDefaultFrom(classLoader, res.canonicalName, key, null, params)
    	if (^val === null && classLoader != res.classLoader) {
    		^val = getStringWithDefaultFrom(classLoader, res.canonicalName, key, null, params)
    	}
    	while ((res !== null) && (^val === null)) {
    		res = res.superclass
    		if (res !== null) {
    			^val = getStringWithDefaultFrom(classLoader, resource.canonicalName, key, null, params)
    		}
    	}    	
    	if (^val === null) {
    		return defaultValue;
    	}
    	return ^val
    }

    /** Decode the specified array of bytes according to
     * a charset selection. This function tries
     * to decode a string from the given byte array
     * with the following charsets (in preferred order):
     * <ul>
     * <li>the current charset returned by {@link Charset#defaultCharset()},</li>
     * <li>OEM United States: IBM437,</li>
     * <li>West European: ISO-8859-1,</li>
     * <li>one of the charst returned by {@link Charset#availableCharsets()}.</li>
     * </ul>
     * <p>
     * The IBM437 charset was added to support several specific files (Dbase files)
     * generated from a GIS.
     * 
     * @param bytes is the array of bytes to decode.
     * @return the decoded string with the appropriate charset set.
     */
    static def decodeString(bytes : byte[]) : String {
    	var default_charset = Charset.defaultCharset
    	var west_european = Charset.forName("ISO-8859-1") //$NON-NLS-1$
    	var utf = Charset.forName("UTF-8") //$NON-NLS-1$
    	
    	var refBuffer = new String(bytes)
    	
		var buffer = decodeString(bytes, default_charset, refBuffer.length)

		if ((buffer === null) && (default_charset != west_european)) {
			buffer = decodeString(bytes, west_european, refBuffer.length)
		}
    	
		if ((buffer === null) && (default_charset != utf)) {
			buffer = decodeString(bytes, utf, refBuffer.length)
		}

		if (buffer === null) {
    		// Decode until one of the available charset replied a value
	    	for (charset : Charset.availableCharsets.values) {
				buffer = decodeString(bytes, charset, refBuffer.length)
				if (buffer !== null) {
					return buffer.toString
				}
	    	}
    	}
    	// Use the default encoding
    	return refBuffer
    }
   
    /** Decode the specified array of bytes with the specified charset.
     * 
     * @param bytes is the array of bytes to decode.
     * @param charset is the charset to use for decoding
     * @param referenceLength is the length of the attempted result. If negative, this parameter is ignored.
     * @return the decoded string with the appropriate charset set,
     * or <code>null</code> if the specified charset cannot be
     * used to decode all the characters inside the byte array.
     */
    private static def decodeString(bytes : byte[], charset : Charset, referenceLength : int) : CharBuffer {
    	try {
    		var autodetected_charset = charset
        	var decoder = charset.newDecoder
			var buffer = decoder.decode(ByteBuffer::wrap(bytes))
			if ((decoder.autoDetecting) &&
				(decoder.charsetDetected)) {
				autodetected_charset = decoder.detectedCharset
				if (charset.contains(autodetected_charset)) {
					buffer.position(0)
					if ((referenceLength >= 0) && (buffer.remaining == referenceLength))
						return buffer
					return null
				}
			}
			// Apply a proprietaty detection
			buffer.position(0)
			var c : char
			var type : int
			while (buffer.hasRemaining) {
				c = buffer.get
				type = Character::getType(c)
	        	switch(type) {
		        	case Character.UNASSIGNED,
					case Character.CONTROL,
		        	case Character.FORMAT,
		        	case Character.PRIVATE_USE,
		        	case Character.SURROGATE: {
						// Character not supported?
		        		return null;
					}
	        	}
			}
			buffer.position(0)
			if ((referenceLength >= 0) && (buffer.remaining == referenceLength))
				return buffer
		} catch (e : CharacterCodingException) {
			//
		}
    	return null
    }
    
    /** Decode the bytes from the specified input stream
     * according to a charset selection. This function tries
     * to decode a string from the given byte array
     * with the following charsets (in preferred order):
     * <ul>
     * <li>the current charset returned by {@link Charset#defaultCharset()},</li>
     * <li>OEM United States: IBM437,</li>
     * <li>West European: ISO-8859-1,</li>
     * <li>one of the charst returned by {@link Charset#availableCharsets()}.</li>
     * </ul>
     * <p>
     * The IBM437 charset was added to support several specific files (Dbase files)
     * generated from a GIS.
     * 
     * @param stream is the stream to decode.
     * @return the decoded string with the appropriate charset set.
     * @throws IOException 
     */
    static def decodeString(stream : InputStream) : String {
    	var complete_buffer = Array::newInstance(byte, 0) as byte[]
    	var buffer = Array::newInstance(byte, 2048) as byte[]
    	var read : int
    	
    	while ((read = stream.read(buffer)) > 0) {
    		var tmp = Array::newInstance(byte, complete_buffer.length + read) as byte[]
    		System.arraycopy(complete_buffer,0,tmp,0,complete_buffer.length)
    		System.arraycopy(buffer,0,tmp,complete_buffer.length,read)
    		complete_buffer = tmp
    		tmp = null
    	}
    	
    	complete_buffer.decodeString
    }

    /** Decode the bytes from the specified input stream
     * according to a charset selection. This function tries
     * to decode a string from the given byte array
     * with the following charsets (in preferred order):
     * <ul>
     * <li>the current charset returned by {@link Charset#defaultCharset()},</li>
     * <li>OEM United States: IBM437,</li>
     * <li>West European: ISO-8859-1,</li>
     * <li>one of the charst returned by {@link Charset#availableCharsets()}.</li>
     * </ul>
     * <p>
     * The IBM437 charset was added to support several specific files (Dbase files)
     * generated from a GIS.
     * <p>
     * This function read the input stream line by line.
     * 
     * @param stream is the stream to decode.
     * @param lineArray is the array of lines to fill
     * @return <code>true</code> is the decoding was successful,
     * otherwhise <code>false</code>
     * @throws IOException 
     */
    static def decodeString(stream : InputStream, lineArray : List<String>) : boolean {
    	// Read the complete file
		var complete_buffer = Array::newInstance(byte, 0) as byte[]
		var buffer = Array::newInstance(byte, 2048) as byte[]
    	var read : int
    	
    	while ((read = stream.read(buffer)) > 0) {
    		var tmp = Array::newInstance(byte, complete_buffer.length+read) as byte[]
    		System.arraycopy(complete_buffer, 0, tmp, 0, complete_buffer.length)
    		System.arraycopy(buffer, 0, tmp, complete_buffer.length, read)
    		complete_buffer = tmp
    		tmp = null
    	}

    	buffer = null
    	
    	// Get the two default charsets
    	//Charset oem_us = Charset.forName("IBM437"); //$NON-NLS-1$
    	var west_european = Charset.forName("ISO-8859-1") //$NON-NLS-1$
    	var default_charset = Charset.defaultCharset
    	
    	// Decode with the current charset
    	var ok = decodeString(new ByteArrayInputStream(complete_buffer), lineArray, default_charset)
    	
    	// Decode with the default oem US charset
    	/*if ((!ok)&&(!default_charset.equals(oem_us))) {
    		ok = decodeString(new ByteArrayInputStream(complete_buffer),lineArray,oem_us); 
    	}*/

    	// Decode with the default west european charset
    	if ((!ok) && (default_charset != west_european)) {
    		ok = decodeString(new ByteArrayInputStream(complete_buffer), lineArray, west_european) 
    	}
    	
		// Decode until one of the available charset replied a value
    	if (!ok) {
	    	for (charset : Charset::availableCharsets.entrySet) {
				if (decodeString(new ByteArrayInputStream(complete_buffer), lineArray, charset.value)) {
					complete_buffer = null
					return true
				}
			}
    	}

		complete_buffer = null
    	return ok
    }

    /** Decode the bytes from the specified input stream
     * according to a charset selection. This function tries
     * to decode a string from the given byte array
     * with the following charsets (in preferred order):
     * <p>
     * This function read the input stream line by line.
     * 
     * @param stream is the stream to decode.
     * @param lineArray is the array of lines to fill.
     * @param charset is the charset to use.
     * @return <code>true</code> is the decoding was successful,
     * otherwhise <code>false</code>
     * @throws IOException 
     */
    private static def decodeString(stream : InputStream, lineArray : List<String>,
		charset : Charset) : boolean {
    	try {
    		var breader = new BufferedReader(new InputStreamReader(stream,charset.newDecoder))
    		
    		lineArray.clear
    		
    		var line : String
    		while ((line = breader.readLine) !== null) {
    			lineArray += line
    		}
    		
    		return true
    	}
    	catch(e : CharacterCodingException) {
    		//
    	}
    	return false
    }
    
}
