/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.gui

import fr.utbm.info.ia51.framework.environment.AgentBody
import fr.utbm.info.ia51.framework.environment.MobileObject
import fr.utbm.info.ia51.framework.math.Vector2f
import java.awt.Dimension
import java.awt.Graphics
import java.awt.Graphics2D
import java.awt.Point
import java.awt.geom.Rectangle2D
import java.awt.image.BufferedImage
import java.lang.ref.WeakReference
import javax.swing.JPanel

/** Graphical panel for displaying the world.
 *
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class WorldPanel extends JPanel {

	val windowContainer : WeakReference<FrameworkGUI>

	/**
	 * @param window the container.
	 * @param hideMouseCursor indicates if the mouse cursor must be hidden.
	 */
	new (window : FrameworkGUI, hideMouseCursor : boolean) {
		this.windowContainer = new WeakReference(window)
		if (hideMouseCursor) {
			this.cursor = this.toolkit.createCustomCursor(
				new BufferedImage( 1, 1, BufferedImage::TYPE_INT_ARGB ), new Point, null)
		}
	}

	/** Replies the container of this panel for the simulator UI.
	 *
	 * @return the container.
	 */
	protected final def getWindow : FrameworkGUI {
		this.windowContainer.get
	}

	override paint(g : Graphics) {
		super.paint(g)
		val g2d = g as Graphics2D

		g2d.color = this.background.darker
		g2d.draw(new Rectangle2D.Float(
				0, 0,
				window.mas2screen(this.window.worldWidth),
				window.mas2screen(this.window.worldHeight)))

		var currentDim = this.preferredSize

		this.window.paintWorld(g2d)

		g2d.drawObjects(currentDim)

		this.window.paintAxes(g2d)
	}

	private def drawObjects(g2d : Graphics2D, currentDim : Dimension) {
		val state = this.window.lastWorldState
		if (state === null) return;
		for (o : state.objects) {
			var positionOnScreen = this.window.mas2screen(o.position)
			var directionOnScreen : Vector2f
			if (o instanceof MobileObject) {
				directionOnScreen = this.window.mas2screen(o.direction)
			} else {
				directionOnScreen = null
			}
			var awtShape = this.window.mas2screen(o.shape)
			if (o instanceof AgentBody) {
				var frustum = o.frustum
				var frustumShape = frustum?.toShape(o.position, o.direction)
				this.window.paintAgentBody(
					g2d,
					positionOnScreen,
					directionOnScreen,
					awtShape,
					o.type,
					o.name,
					o.position,
					this.window.mas2screen(frustumShape))
			} else {
				this.window.paintSituatedObject(
					g2d,
					positionOnScreen,
					directionOnScreen,
					awtShape,
					o.type,
					o.name,
					o.position)
			}
		}
	}

}
