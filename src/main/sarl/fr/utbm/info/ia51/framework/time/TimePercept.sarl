/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.time

import java.io.Serializable

import com.google.common.base.Objects
import java.util.concurrent.TimeUnit

/** A perception of the time.
 *
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class TimePercept extends AbstractTime implements Serializable, Cloneable {

	val currentTime : float
	val stepDuration : float
	
	/**
	 * @param currentTime
	 * @param stepDuration
	 */
	new (currentTime : float, stepDuration : float) {
		this.currentTime = currentTime
		this.stepDuration = stepDuration
	}

	def getCurrentTime(unit : TimeUnit = null) : float {
		this.currentTime.secondsToUnits(unit)
	}

	def getLastStepDuration(unit : TimeUnit = null) : float {
		this.stepDuration.secondsToUnits(unit)
	}
	
	override clone : TimePercept {
		super.clone as TimePercept
	}
	
	override equals(obj : Object) : boolean {
		if (obj instanceof Time) {
			this.currentTime == obj.currentTime
		} else {
			false
		}
	}
	
	override hashCode : int{
		Objects::hashCode(this.currentTime)
	}
	
	override toString : String {
		Float::toString(this.currentTime)
	}

}