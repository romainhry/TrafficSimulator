/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.time

import java.util.concurrent.TimeUnit

/** Abstract implementation of a time.
 *
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractTime implements Time {

	static def secondsToUnits(t : float, unit : TimeUnit) : float {
		switch(unit) {
			case DAYS: {
				t / 86400f
			}	
			case HOURS: {
				t / 3600f
			}
			case MINUTES: {
				t / 60f
			}
			case MILLISECONDS: {
				t * 1000f
			}
			case MICROSECONDS: {
				t * 1000000f
			}
			case NANOSECONDS: {
				t * 1000000000f	
			}
			default: {
				t
			}
		}
	}

	static def unitsToSeconds(t : float, unit : TimeUnit) : float {
		switch (unit) {
			case DAYS: {
				t * 86400f
			}
			case HOURS: {
				t * 3600f
			}
			case MINUTES: {
				t * 60f
			}
			case MILLISECONDS: {
				t / 1000f
			}
			case MICROSECONDS: {
				t / 1000000f
			}
			case NANOSECONDS: {
				t / 1000000000f
			}
			default: {
				t
			}
		}
	}

	
	override perSecond(amountPerSecond : float) : float {
		amountPerSecond * lastStepDuration
	}

	override compareTo(o : Time) : int {
		var t = o?.currentTime
		return currentTime <=> t
	}

}