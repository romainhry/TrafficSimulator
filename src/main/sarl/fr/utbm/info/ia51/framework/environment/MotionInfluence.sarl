/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.environment

import java.util.UUID

import fr.utbm.info.ia51.framework.math.Vector2f


/**
 * Abstract implementation of a motion influence.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class MotionInfluence extends Influence {

	val type : DynamicType 
	val linearInfluence = new Vector2f
	var angularInfluence : float
	
	/**
	 * @param type indicates if the influence is kinematic or steering.
	 * @param influencedObject is the influenced object.
	 * @param linearInfluence is the linear influence to apply on the object.
	 * @param angularInfluence is the angular influence to apply on the object.
	 */
	new (type : DynamicType, influencedObject : UUID = null, linearInfluence : Vector2f = null, angularInfluence : float = 0) {
		super(influencedObject)
		this.type = type;
		if (linearInfluence !== null) {
			this.linearInfluence.set(linearInfluence)
		}
		this.angularInfluence = angularInfluence
	}

	/** Set the linear influence.
	 * 
	 * @param l is the linear influence
	 */
	def setLinarInfluence(l : Vector2f) {
		//TODO assert(l!=null);
		this.linearInfluence.set(l)
	}
		
	/** Set the linear influence.
	 * 
	 * @param dx is the linear influence
	 * @param dy is the linear influence
	 */
	def setLinarInfluence(dx : float, dy : float) {
		this.linearInfluence.set(dx, dy)
	}

	/** Set the angular influence.
	 * 
	 * @param a
	 */
	def setAngularInfluence(a : float) {
		this.angularInfluence = a
	}

	/** Replies the linear influence.
	 * 
	 * @return the linear influence
	 */
	def getLinearInfluence : Vector2f {
		this.linearInfluence
	}
		
	/** Replies the angular influence.
	 * 
	 * @return the angular influence
	 */
	def getAngularInfluence : float {
		this.angularInfluence
	}
	
	/** Replies the type of the influence.
	 * 
	 * @return the type of the influence.
	 */
	def getType : DynamicType {
		this.type
	}
	
	override toString : String {
		this.linearInfluence + "|" + this.angularInfluence
	}

}