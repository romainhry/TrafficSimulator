/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.environment

import fr.utbm.info.ia51.framework.math.Point2f
import fr.utbm.info.ia51.framework.math.Vector2f
import fr.utbm.info.ia51.framework.time.TimeManager
import java.lang.reflect.Array
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.List
import java.util.Map
import java.util.TreeMap
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean

/**
 * Abstract implementation of a situated environment.  
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractEnvironment implements Environment {

	val agentBodies : Map<UUID, AgentBody> = new TreeMap
	val timeManager : TimeManager
	val width : float
	val height : float
	val listeners : Collection<EnvironmentListener> = new ArrayList
	val stateChanged = new AtomicBoolean
	val init = new AtomicBoolean(true)

	/**
	 * @param width is the width of the environment.
	 * @param height is the height of the environment.
	 * @param timeManager is the time manager to use.
	 */
	new (width : float, height : float, timeManager : TimeManager) {
		this.width = width
		this.height = height
		this.timeManager = timeManager
	}
	
	/** Mark the state of the environment as changed.
	 */
	protected def stateChanged {
		this.stateChanged.set(true)
	}

	override addEnvironmentListener(listener : EnvironmentListener) {
		synchronized(this.listeners) {
			this.listeners += listener
		}
	}

	override removeEnvironmentListener(listener : EnvironmentListener) {
		synchronized(this.listeners) {
			this.listeners -= listener
		}
	}

	/** Invoked to create an environment event.
	 * 
	 * @return an environment event.
	 */
	protected def createEnvironmentEvent : EnvironmentEvent {
		new EnvironmentEvent(this)
	}

	/** Notifies listeners about changes in environment.
	 */
	protected def fireEnvironmentChange {
		var list : EnvironmentListener[]
		synchronized(this.listeners) {
			list = Array.newInstance(EnvironmentListener, this.listeners.size) as EnvironmentListener[] 
			this.listeners.toArray(list)
		}
		var ^event = createEnvironmentEvent
		for(listener : list) {
			listener.environmentChanged(^event)
		}
	}

	override getTimeManager : TimeManager {
		this.timeManager
	}

	override getWidth : float {
		this.width
	}

	override getHeight : float {
		this.height
	}

	protected synchronized def addAgentBody(body : AgentBody, position : Point2f, direction : float) {
		if (this.init.get) {
			this.agentBodies.put(body.ID, body)
			body.position = position
			body.angle = direction
			body.onAgentBodyCreated
		} else {
			throw new IllegalStateException("You cannot call this function after the start of the simulation");
		}
	}

	/** Invoked when an agent body is created.
	 * 
	 * @param body the body.
	 */
	protected abstract def onAgentBodyCreated(body : AgentBody)

	/** Invoked when an agent body is destroyed.
	 * 
	 * @param body the body.
	 */
	protected abstract def onAgentBodyDestroyed(body : AgentBody)

	def getState : WorldModelState {
		new WorldModelState(this)
	}

	/** Replies the bodies in the environment.
	 *
	 * The replied collection is unmodifiable.
	 * 
	 * @return the bodies in the environment.
	 */
	def getAgentBodies : Iterable<AgentBody> {
		Collections.unmodifiableCollection(this.agentBodies.values)
	}

	override getAgentBodyNumber : int {
		this.agentBodies.size
	}

	override getAgentBodyFor(agentId : UUID) : AgentBody {
		this.agentBodies.get(agentId)
	}

	override runBehaviour {
		if (this.init.getAndSet(false)) {
			fireEnvironmentChange
		}

		this.stateChanged.set(false)

		var motionInfluences = new ArrayList<MotionInfluence>
		var otherInfluences = new ArrayList<Influence>
		for(body : this.agentBodies.values) {
			var mi = body.consumeMotionInfluence
			if (mi !== null) {
				motionInfluences += mi
			}
			for (i : body.consumeOtherInfluences) {
				if (i instanceof KillInfluence) {
					stateChanged()
					var rbody = (this.agentBodies -= i.emitter)
					if (rbody !== null) {
						rbody.onAgentBodyDestroyed
					}
				} else {
					otherInfluences += i
				}
			}
		}

		for(i : computeEndogenousBehaviorInfluences) {
			if (i instanceof MotionInfluence) {
				motionInfluences += i
			} else if (!(i instanceof KillInfluence)) {
				otherInfluences += i
			}
		}

		if (!motionInfluences.isEmpty || !otherInfluences.isEmpty) {
			applyInfluences(
					motionInfluences,
					otherInfluences,
					this.timeManager)
		}

		if (this.stateChanged.get) {
			fireEnvironmentChange
		}

		this.timeManager.increment

		var list : List<Percept> 
		for(body : this.agentBodies.values) {
			list = body.computePerceptionsFor
			body.setPerceptions(list ?: emptyList)
		}
	}

	/** Compute the influences for the endogenous behavior of the environment.
	 * 
	 * @return the list of the environment influences.
	 */
	protected abstract def computeEndogenousBehaviorInfluences : List<Influence>

	/** Compute the perceptions for an agent body.
	 * 
	 * @param agent is the body of the perceiver.
	 * @return the list of the perceived object, never <code>null</code>
	 */
	protected abstract def computePerceptionsFor(^agent : AgentBody) : List<Percept> 

	/** Detects conflicts between influences and applied resulting actions.
	 * 
	 * @param motionInfluences are the motion influences to apply.
	 * @param otherInfluences are the other influences to apply.
	 * @param timeManager is the time manager of the environment.
	 */
	protected abstract def applyInfluences(motionInfluences : Collection<MotionInfluence>,
			otherInfluences : Collection<Influence>, timeManager : TimeManager)

	/** Compute a steering move according to the linear move and to
	 * the internal attributes of this object.
	 * 
	 * @param obj is the object to move.
	 * @param move is the requested motion.
	 * @param clock is the simulation time manager
	 * @return the linear instant motion.
	 */
	protected final def computeSteeringTranslation(obj : MobileObject, move : Vector2f,
		clock : TimeManager) : Vector2f {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeSteeringTranslation(move, clock)
		}
		throw new IllegalArgumentException("obj") //$NON-NLS-1$
	}

	/** Compute a kinematic move according to the linear move and to
	 * the internal attributes of this object.
	 * 
	 * @param obj is the object to move.
	 * @param move is the requested motion.
	 * @param clock is the simulation time manager
	 * @return the linear instant motion.
	 */
	protected final def computeKinematicTranslation(obj : MobileObject, move : Vector2f,
		clock : TimeManager) : Vector2f {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeKinematicTranslation(move, clock)
		}
		throw new IllegalArgumentException("obj") //$NON-NLS-1$
	}

	/** Compute a kinematic move according to the angular move and to
	 * the internal attributes of this object.
	 * 
	 * @param obj is the object to move.
	 * @param move is the requested motion.
	 * @param clock is the simulation time manager
	 * @return the angular instant motion.
	 */
	protected final def computeKinematicRotation(obj : MobileObject, move : float, clock : TimeManager) : float {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeKinematicRotation(move, clock)
		}
		throw new IllegalArgumentException("obj") //$NON-NLS-1$
	}

	/** Compute a steering move according to the angular move and to
	 * the internal attributes of this object.
	 * 
	 * @param obj is the object to move.
	 * @param move is the requested motion.
	 * @param clock is the simulation time manager
	 * @return the angular instant motion.
	 */
	protected final def computeSteeringRotation(obj : MobileObject, move : float, clock : TimeManager) : float {
		if (obj instanceof AbstractMobileObject) {
			return obj.computeSteeringRotation(move, clock)
		}
		throw new IllegalArgumentException("obj") //$NON-NLS-1$
	}

	/** Move the given object.
	 * 
	 * @param obj is the object to move.
	 * @param instantTranslation is the linear motion in m
	 * @param instantRotation is the angular motion in r
	 */
	protected final def move(obj : MobileObject, instantTranslation : Vector2f, instantRotation : float) {
		if (obj instanceof AbstractMobileObject) {
			var duration = this.timeManager.lastStepDuration
			obj.move(instantTranslation.x, instantTranslation.y, duration, this.width, this.height)
			obj.rotate(instantRotation, duration)
			stateChanged()
		} else {
			throw new IllegalArgumentException("obj") //$NON-NLS-1$
		}
	}

}