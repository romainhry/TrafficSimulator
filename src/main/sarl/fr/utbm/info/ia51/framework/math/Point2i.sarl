/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.math

import static extension java.lang.Math.*

import org.eclipse.xtext.xbase.lib.Inline
import org.eclipse.xtext.xbase.lib.Pure

/** 2D Point with 2 integer numbers.
 *
 * Copied from {@link https://github.com/gallandarakhneorg/afc/}.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class Point2i extends Tuple2i<Point2i> {

	/**
	 * Computes the square of the distance between this point and point p1.
	 * @param p1 the other point
	 * @return the distance.
	 */
	@Pure
	def distanceSquared(p1 : Point2i) : float {
	      var dx : float
	      var dy : float
	      dx = this.x - p1.x  
	      dy = this.y - p1.y
	      return dx * dx + dy * dy
	}

	/**
	 * Computes the distance between this point and point p1.
	 * @param p1 the other point
	 * @return the distance. 
	 */ 
	@Pure   
	def distance(p1 : Point2i) : float {
	      var dx : float 
	      var dy : float
	      dx = this.x - p1.x  
	      dy = this.y - p1.y
	      return (dx * dx + dy * dy).sqrt as float
	}

	/**
	 * Computes the L-1 (Manhattan) distance between this point and
	 * point p1.  The L-1 distance is equal to abs(x1-x2) + abs(y1-y2).
	 * @param p1 the other point
	 * @return the distance.
    */
	@Pure
	def distanceL1(p1 : Point2i) : float {
	      (this.x - p1.x).abs + (this.y - p1.y).abs
	}

	/**
	 * Computes the L-infinite distance between this point and
	 * point p1.  The L-infinite distance is equal to 
	 * MAX[abs(x1-x2), abs(y1-y2)]. 
	 * @param p1 the other point
	 * @return the distance.
	 */
	@Pure
	def distanceLinf(p1 : Point2i) : float {
		max((this.x - p1.x).abs, (this.y - p1.y).abs)
	}

	/**
	 * Sets the value of this tuple to the sum of tuples t1 and t2.
	 * @param t1 the first tuple
	 * @param t2 the second tuple
	 */
	def add(t1 : Point2i, t2 : Vector2i) {
		this.x = t1.x + t2.x
		this.y = t1.y + t2.y
	}

	/**
	 * Sets the value of this tuple to the sum of tuples t1 and t2.
	 * @param t1 the first tuple
	 * @param t2 the second tuple
	 */
	def add(t1 : Vector2i, t2 : Point2i) {
		this.x = t1.x + t2.x
		this.y = t1.y + t2.y
	}
	
	/**
	 * Sets the value of this tuple to the sum of itself and t1.
	 * @param t1 the other tuple
	 */
	def add(t1 : Vector2i) {
		this.x += t1.x
		this.y += t1.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of tuple t1 plus tuple t2 (this = s*t1 + t2).
	 * @param s the scalar value
	 * @param t1 the tuple to be multipled
	 * @param t2 the tuple to be added
	 */
	def scaleAdd(s : int, t1 : Vector2i, t2 : Point2i) {
		this.x = s * t1.x + t2.x
		this.y = s * t1.y + t2.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of tuple t1 plus tuple t2 (this = s*t1 + t2).
	 * @param s the scalar value
	 * @param t1 the tuple to be multipled
	 * @param t2 the tuple to be added
	 */
	def scaleAdd(s : float, t1 : Vector2i, t2 : Point2i) {
		this.x = (s * t1.x + t2.x) as int
		this.y = (s * t1.y + t2.y) as int
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of tuple t1 plus tuple t2 (this = s*t1 + t2).
	 * @param s the scalar value
	 * @param t1 the tuple to be multipled
	 * @param t2 the tuple to be added
	 */
	def scaleAdd(s : int, t1 : Point2i, t2 : Vector2i) {
		this.x = s * t1.x + t2.x
		this.y = s * t1.y + t2.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of tuple t1 plus tuple t2 (this = s*t1 + t2).
	 * @param s the scalar value
	 * @param t1 the tuple to be multipled
	 * @param t2 the tuple to be added
	 */
	def scaleAdd(s : float, t1 : Point2i, t2 : Vector2i) {
		this.x = (s * t1.x + t2.x) as int
		this.y = (s * t1.y + t2.y) as int
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of itself and then adds tuple t1 (this = s*this + t1).
	 * @param s the scalar value
	 * @param t1 the tuple to be added
	 */
	def scaleAdd(s : int, t1 : Vector2i) {
		this.x = s * this.x + t1.x
		this.y = s * this.y + t1.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of itself and then adds tuple t1 (this = s*this + t1).
	 * @param s the scalar value
	 * @param t1 the tuple to be added
	 */
	def scaleAdd(s : float, t1 : Vector2i) {
		this.x = (s * this.x + t1.x) as int
		this.y = (s * this.y + t1.y) as int
	}

	
	/**
	 * Sets the value of this tuple to the difference
	 * of tuples t1 and t2 (this = t1 - t2).
	 * @param t1 the first tuple
	 * @param t2 the second tuple
	 */
	def sub(t1 : Point2i, t2 : Vector2i) {
		this.x = t1.x - t2.x
		this.y = t1.y - t2.y
	}

	/**
	 * Sets the value of this tuple to the difference
	 * of itself and t1 (this = this - t1).
	 * @param t1 the other tuple
	 */
	def sub(t1 : Vector2i) {
		this.x -= t1.x
		this.y -= t1.y
	}
	
	/** Sum of vectors: r = this + v.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #add(Point2i, Vector2f)
	 */
	@Pure
	def operator_plus(v : Vector2i) : Point2i {
		var r = new Point2i
		r.add(this, v)
		return r
	}

	/** Sum of vectors: this += v.
	 * It is equivalent to {@code this.add(v)}.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #add(Vector2f)
	 */
	@Inline(value = "$1.add($2)")
	def operator_add(v : Vector2i) {
		add(v)
	}

	/** Subtract of vectors: r = this - v.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #sub(Point2i, Vector2f)
	 */
	@Pure
	def operator_minus(v : Vector2i) : Point2i {
		var r = new Point2i
		r.sub(this, v)
		return r
	}

	/** Compute a vectors: r = this - p.
	 * 
	 * @param p the point
	 * @return the vector from the p to this.
	 * @see Vector2f#sub(Point2i, Point2i)
 	*/
	@Pure
	def operator_minus(p : Point2i) : Vector2i {
		var r = new Vector2i
		r.sub(this, p)
		return r
	}

	/** Subtract of vectors: this -= v.
	 * It is equivalent to {@code this.sub(v)}.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #sub(Vector2f)
	 */
	@Inline(value = "$1.sub($2)")
	def operator_remove(v : Vector2i) {
		sub(v)
	}

	/** Replies if the vectors are equal.
	 * 
	 * @param v the vector.
	 * @return test result.
	 */
	@Pure
	@Inline(value = "$1.equals($2)")
	def operator_equals(v : Vector2i) : boolean {
		equals(v)
	}

	/** Replies if the vectors are not equal.
	 * 
	 * @param v the vector.
	 * @return test result.
	 */
	@Pure
	@Inline(value = "!$1.equals($2)")
	def operator_notEquals(v : Vector2i) : boolean {
		!equals(v)
	}

	/** Replies if the distance between this and v
	 * 
	 * @param v the vector.
	 * @return the distance.
	 * @see #distance(Point2i)
	 */
	@Pure
	@Inline(value = "$1.distance($2)")
	def operator_upTo(v : Point2i) : float {
		distance(v)
	}

	/** If the tuple is nul then b else a.
	 * 
	 * @param v the vector.
	 * @return the vector.
	 * @see #epsilonNul(float)
	 * @see MathUtil#EPSILON
	 */
	@Pure
	def operator_elvis(v : Point2i) : Point2i {
		if (epsilonNul(MathUtil.EPSILON)) {
			return v
		}
		return this
	}

}