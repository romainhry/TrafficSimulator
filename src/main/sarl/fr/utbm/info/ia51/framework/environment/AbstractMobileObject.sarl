/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.environment

import fr.utbm.info.ia51.framework.math.MathUtil
import fr.utbm.info.ia51.framework.math.Shape2f
import fr.utbm.info.ia51.framework.math.Vector2f
import fr.utbm.info.ia51.framework.time.TimeManager
import java.util.UUID

import static extension java.lang.Math.*

/**
 * Abstract implementation of an object on the environment.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractMobileObject extends AbstractSituatedObject implements MobileObject {

	val maxLinearSpeed : float
	val maxLinearAcceleration : float
	val maxAngularSpeed : float
	val maxAngularAcceleration : float
	
	var angle = 0f
	var currentAngularSpeed = 0f
	var linearMove = new Vector2f

	/**
	 * @param id the identifier of the object.
	 * @param shape the shape of the body, considering that it is centered at the (0,0) position.
	 * @param maxLinearSpeed is the maximal linear speed.
	 * @param maxLinearAcceleration is the maximal linear acceleration.
	 * @param maxAngularSpeed is the maximal angular speed.
	 * @param maxAngularAcceleration is the maximal angular acceleration.
	 */
	new (id : UUID, shape : Shape2f<?>, maxLinearSpeed : float, maxLinearAcceleration : float, maxAngularSpeed : float,
		maxAngularAcceleration : float) {
		super(id, shape)
		this.maxLinearSpeed = maxLinearSpeed.abs
		this.maxLinearAcceleration = maxLinearAcceleration.abs
		this.maxAngularAcceleration = maxAngularAcceleration.abs
		this.maxAngularSpeed = maxAngularSpeed.abs
	}
	
	override clone : AbstractMobileObject {
		var clone = super.clone as AbstractMobileObject
		clone.linearMove = this.linearMove.clone
		return clone
	}

	override getAngle : float {
		this.angle
	}
	
	override getDirection : Vector2f {
		Vector2f::toOrientationVector(this.angle)
	}

	/** Set the orientation of the object.
	 * 
	 * @param angle
	 */
	protected def setAngle(angle : float) {
		this.angle = angle
		this.currentAngularSpeed = 0
	}

	/** Set the direction of the object.
	 * 
	 * @param dx
	 * @param dy
	 */
	protected def setDirection(dx : float, dy : float) {
		this.angle = new Vector2f(dx, dy).orientationAngle
		this.currentAngularSpeed = 0
	}

	override getMaxLinearSpeed : float {
		this.maxLinearSpeed
	}

	override getMaxAngularSpeed : float {
		this.maxAngularSpeed
	}

	override getMaxLinearAcceleration : float {
		this.maxLinearAcceleration
	}

	override getMaxAngularAcceleration : float {
		this.maxAngularAcceleration
	}
	
	override getCurrentAngularSpeed : float {
		this.currentAngularSpeed
	}

	override getCurrentLinearSpeed : float {
		this.linearMove.length
	}

	override getCurrentLinearMotion : Vector2f {
		this.linearMove.clone
	}

	/** Rotate the object.
	 * 
	 * @param rotation is the real instant motion. 
	 * @param simulationDuration is the time during which the motion is applied.
	 */
	protected def rotate(rotation : float, simulationDuration : float) {
		//TODO assert (!Double.isNaN(rotation)) : LocalizedString.getString(getClass(), "INVALID_ROTATION", getName());
		//TODO assert (!Double.isNaN(simulationDuration)) : LocalizedString.getString(getClass(), "INVALID_DURATION", getName());
		this.angle += rotation
		this.currentAngularSpeed = rotation / simulationDuration
	}

	def setPosition(x : float, y : float) {
		super.setPosition(x, y)
		this.linearMove.set(0,0)
	}

	/** Move the situated object.
	 * 
	 * @param dx is the real instant motion. 
	 * @param dy is the real instant motion.
	 * @param simulationDuration is the time during which the motion is applied.
	 * @param worldWidth is the width of the world.
	 * @param worldHeight is the height of the world.
	 * @return the real motion.
	 */
	protected def move(dx : float, dy : float, simulationDuration : float, worldWidth : float,
			worldHeight : float) : Vector2f {
		// Ensure that the motion in inside the bounds of the world.
		var r = new Vector2f(dx, dy)
		var currentShape = this.shape
		var targetShape = currentShape.translate(r)
		var targetBounds = targetShape.bounds

		if (targetBounds.lower.x < 0) {
			r.addX(-targetBounds.lower.x)
		} else if (targetBounds.upper.x > worldWidth) {
			r.subX(targetBounds.upper.x - worldWidth)
		}
		
		if (targetBounds.lower.y < 0) {
			r.addY(-targetBounds.lower.y)
		} else if (targetBounds.upper.y > worldHeight) {
			r.subY(targetBounds.upper.y - worldHeight)
		}

		// Update the position
		addPosition(r.x, r.y)
		
		// Update dynamic properties
		if (simulationDuration > 0) {
			this.linearMove.set(r.x, r.y)
			var distance = this.linearMove.length
			if (distance > 0) {
				this.linearMove.normalize
				this.linearMove *= distance / simulationDuration
			}
		} else {
			this.linearMove.set(0, 0)
		}

		return r
	}

	/** Compute a kinematic move according to the linear move and to
	 * the internal attributes of this object.
	 * 
	 * @param move is the requested motion, expressed with speed.
	 * @param clock is the simulation time manager
	 * @return the linear instant motion.
	 */
	protected def computeKinematicTranslation(move : Vector2f, clock : TimeManager) : Vector2f {
		var speed = move.length
		if (speed != 0f) {
			// Apply Newton-Euler-1 law
			var factor = clock.lastStepDuration * MathUtil::clamp(speed, 0, this.maxLinearSpeed) / speed
			return move * factor
		}
		return new Vector2f
	}

	/** Compute a kinematic move according to the angular move and to
	 * the internal attributes of this object.
	 * 
	 * @param move is the requested motion with speed.
	 * @param clock is the simulation time manager
	 * @return the angular instant motion.
	 */
	protected def computeKinematicRotation(move : float, clock : TimeManager) : float {
		var speed = move.abs
		if (speed != 0f) {
			// Apply Newton-Euler-1 law
			var factor = clock.lastStepDuration * MathUtil::clamp(speed, 0, this.maxAngularSpeed) / speed
			return move * factor
		}
		return 0f
	}

}