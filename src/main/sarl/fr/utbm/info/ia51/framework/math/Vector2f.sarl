/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.math

import static extension java.lang.Math.*

/** 2D Vector with 2 floating-point values.
 *
 * Copied from {@link https://github.com/gallandarakhneorg/afc/}.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class Vector2f extends Tuple2f<Vector2f> {
	/** 
	 */
	new () {
		super()
	}
	/** 
	 * @param tuple is the tuple to copy.
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new (tuple : Tuple2f<?>, normalize : boolean = false) {
		super(tuple)
		if (normalize) safeNormalize
	}
	/** 
	 * @param tuple is the tuple to copy.
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new(tuple : int[], normalize : boolean = false) {
		super(tuple)
		if (normalize) safeNormalize
	}
	/** 
	 * @param tuple is the tuple to copy.
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new(tuple : float[], normalize : boolean = false) {
		super(tuple)
		if (normalize) safeNormalize
	}
	/** 
	 * @param tuple is the tuple to copy.
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new(tuple : long[], normalize : boolean = false) {
		super(tuple)
		if (normalize) safeNormalize
	}
	/** 
	 * @param tuple is the tuple to copy.
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new(tuple : double[], normalize : boolean = false) {
		super(tuple)
		if (normalize) safeNormalize
	}
	/** 
	 * @param x
	 * @param y
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new (x : int, y : int, normalize : boolean = false) {
		super(x, y)
		if (normalize) safeNormalize
	}
	/** 
	 * @param x
	 * @param y
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new (x : float, y : float, normalize : boolean = false) {
		super(x, y)
		if (normalize) safeNormalize
	}
	/** 
	 * @param x
	 * @param y
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new (x : long, y : long, normalize : boolean = false) {
		super(x, y)
		if (normalize) safeNormalize
	}
	/** 
	 * @param x
	 * @param y
	 * @param normalize indicate if the vector should be normalize at init.
	 */
	new (x : double, y : double, normalize : boolean = false) {
		super(x, y)
		if (normalize) safeNormalize
	}

	protected def safeNormalize {
		try {
			normalize
		} catch (e : Throwable) {
			//
		}
	}

	/**
	 * Sets the value of this tuple to the sum of tuples t1 and t2.
	 * @param t1 the first tuple
	 * @param t2 the second tuple
	 */
	def add(t1 : Vector2f, t2 : Vector2f) {
		this.x = t1.x + t2.x
		this.y = t1.y + t2.y
	}

	/**
	 * Sets the value of this tuple to the sum of itself and t1.
	 * @param t1 the other tuple
	 */
	def add(t1 : Vector2f) {
		this.x += t1.x
		this.y += t1.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of tuple t1 plus tuple t2 (this = s*t1 + t2).
	 * @param s the scalar value
	 * @param t1 the tuple to be multipled
	 * @param t2 the tuple to be added
	 */
	def scaleAdd(s : int, t1 : Vector2f, t2 : Vector2f) {
		this.x = s * t1.x + t2.x
		this.y = s * t1.y + t2.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of tuple t1 plus tuple t2 (this = s*t1 + t2).
	 * @param s the scalar value
	 * @param t1 the tuple to be multipled
	 * @param t2 the tuple to be added
	 */
	def caleAdd(s : float, t1 : Vector2f, t2 : Vector2f) {
		this.x = s * t1.x + t2.x
		this.y = s * t1.y + t2.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of itself and then adds tuple t1 (this = s*this + t1).
	 * @param s the scalar value
	 * @param t1 the tuple to be added
	 */
	def scaleAdd(s : int, t1 : Vector2f) {
		this.x = s * this.x + t1.x
		this.y = s * this.y + t1.y
	}

	/**
	 * Sets the value of this tuple to the scalar multiplication
	 * of itself and then adds tuple t1 (this = s*this + t1).
	 * @param s the scalar value
	 * @param t1 the tuple to be added
	 */
	def scaleAdd(s : float, t1 : Vector2f) {
		this.x = s * this.x + t1.x
		this.y = s * this.y + t1.y
	}


	/**
	 * Sets the value of this tuple to the difference
	 * of tuples t1 and t2 (this = t1 - t2).
	 * @param t1 the first tuple
	 * @param t2 the second tuple
	 */
	def sub(t1 : Vector2f, t2 : Vector2f) {
		this.x = t1.x - t2.x
		this.y = t1.y - t2.y
	}

	/**
	 * Sets the value of this tuple to the difference
	 * of tuples t1 and t2 (this = t1 - t2).
	 * @param t1 the first tuple
	 * @param t2 the second tuple
	 */
	def sub(t1 : Point2f, t2 : Point2f) {
		this.x = t1.x - t2.x
		this.y = t1.y - t2.y
	}

	/**
	 * Sets the value of this tuple to the difference
	 * of itself and t1 (this = this - t1).
	 * @param t1 the other tuple
	 */
	def sub(t1 : Vector2f) {
		this.x -= t1.x
		this.y -= t1.y
	}

	/**
	 * Computes the dot product of the this vector and vector v1.
	 * @param v1 the other vector
	 * @return the dot product.
	 */
	def dot(v1 : Vector2f) : float {
		this.x * v1.x + this.y * v1.y
	}

	/** Change the coordinates of this vector to make it a perpendicular
	 * vector to the original coordinates.
	 */
	def perpendicularize() {
		// Based on the cross product in 3D of (vx,vy,0)x(0,0,1), right-handed
		//set(y, -x);
		// Based on the cross product in 3D of (vx,vy,0)x(0,0,1), left-handed
		set(-y, x);
	}

	/**  
	 * Returns the length of this vector.
	 * @return the length of this vector
	 */  
	def length : float{
		(this.x * this.x + this.y * this.y).sqrt as float
	}

	/**  
	 * Returns the squared length of this vector.
	 * @return the squared length of this vector
	 */  
	def lengthSquared : float {
		this.x * this.x + this.y * this.y
	}
	
	/**  
	 * Set the length of this vector.
	 * @param length - the length of this vector
	 */  
	def setLength(length : float) {
		if (length >= 0f) {
			var norm = this.x * this.x + this.y * this.y
			if (norm != 0f) {
				norm = norm.sqrt as float
				norm = length / norm
				this.x *= norm
				this.y *= norm
			} else {
				this.x = length
				this.y = 0f
			}
		} else {
			this.x = this.y = 0f
		}
	}

	/** Create a colinear vector with the given length.
	 *
	 * @param length - the length.
	 * @return the colinear vector.
	 */
	def toColinearVector(length : float) : Vector2f {
		var x : float
		var y : float
		if (length >= 0f) {
			var norm = this.x * this.x + this.y * this.y
			if (norm != 0f) {
				norm = norm.sqrt as float
				norm = length / norm
				x = this.x * norm
				y = this.y * norm
			} else {
				x = length
				y = 0f
			}
		} else {
			x = y = 0f
		}
		new Vector2f(x, y)
	}

	/**
	 * Sets the value of this vector to the normalization of vector v1.
	 * @param v1 the un-normalized vector
	 */  
	def normalize(v1 : Vector2f) {
		var norm = 1f / v1.length
		this.x = v1.x * norm
		this.y = v1.y * norm
	}

	/**
	 * Normalizes this vector in place.
	 */  
	def normalize {
		var norm = (1.0 / (this.x * this.x + this.y * this.y).sqrt) as float
		this.x *= norm
		this.y *= norm
	}


	/**
	 *   Returns the angle in radians between this vector and the vector
	 *   parameter; the return value is constrained to the range [0,PI].
	 *   @param v1    the other vector
	 *   @return   the angle in radians in the range [0,PI]
	 */
	def angle(v1 : Vector2f) : float {
		var vDot : double = dot(v1) / ( length * v1.length )
		if( vDot < -1.0) vDot = -1.0
		if( vDot >  1.0) vDot =  1.0
		vDot.acos as float
	}

	/** Compute a signed angle between this vector and the given vector.
	 * <p>
	 * The signed angle between this vector and {@code v}
	 * is the rotation angle to apply to this vector
	 * to be colinear to {@code v} and pointing the
	 * same demi-plane. It means that the angle replied
	 * by this function is be negative if the rotation
	 * to apply is clockwise, and positive if
	 * the rotation is counterclockwise.
	 * <p>
	 * The value replied by {@link #angle(Vector2D)}
	 * is the absolute value of the vlaue replied by this
	 * function. 
	 * 
	 * @param v is the vector to reach.
	 * @return the rotation angle to turn this vector to reach
	 * {@code v}.
	 */
	def signedAngle(v : Vector2f) : float {
		return MathUtil::signedAngle(this.x, this.y, v.x, v.y)
	}

	/** Turn this vector about the given rotation angle.
	 * 
	 * @param angle is the rotation angle in radians.
	 */
	def turn(angle : float) {
		var sin = angle.sin
		var cos = angle.cos
		var x =  cos * this.x + -sin * this.y // -sin is on this line according to the coordinate system
		var y =  sin * this.x + cos * this.y
		set(x as float, y as float)
	}

	/** Replies the orientation angle on a trigonometric circle
	 * that is corresponding to the given direction of this vector.
	 * 
	 * @return the angle on a trigonometric circle that is corresponding
	 * to the given orientation vector.
	 */
	def getOrientationAngle : float {
		var angle = this.x.acos
		if (this.y < 0f) angle = -angle
		return MathUtil::clampRadian(angle as float)
	}

	/** Set this vector with the direction of the orientation angle on a trigonometric circle.
	 * 
	 * @param angle the angle on a trigonometric circle.
	 */
	def setOrientationAngle(angle : float ) {
		set(angle.cos as float, angle.sin as float);
	}

	/** Replies the orientation vector, which is corresponding
	 * to the given angle on a trigonometric circle.
	 * 
	 * @param angle is the angle in radians to translate.
	 * @return the orientation vector which is corresponding to the given angle.
	 */
	static def toOrientationVector(angle : float) : Vector2f {
		new Vector2f(angle.cos as float, angle.sin as float)
	}

	/** Sum of vectors: r = this + v.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #add(Vector2f, Vector2f)
	 */
	def operator_plus(v : Vector2f) : Vector2f {
		var r = new Vector2f
		r.add(this, v)
		return r
	}

	/** Add vector to a point: r = this + p.
	 * 
	 * @param p the point
	 * @return the result.
	 * @see Point2f#add(Point2f, Vector2f)
	 */
	def operator_plus(p : Point2f) : Point2f {
		var r = new Point2f
		r.add(p, this)
		return r
	}

	/** Sum of vectors: this += v.
	 * It is equivalent to {@code this.add(v)}.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #add(Vector2f)
	 */
	def operator_add(v : Vector2f) {
		add(v)
	}

	/** Subtract of vectors: r = this - v.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #sub(Vector2f, Vector2f)
	 */
	def operator_minus(v : Vector2f ) : Vector2f  {
		var r = new Vector2f
		r.sub(this, v)
		return r
	}

	/** Subtract of vectors: this -= v.
	 * It is equivalent to {@code this.sub(v)}.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #sub(Vector2f)
	 */
	def operator_remove(v : Vector2f) {
		sub(v)
	}

	/** Negation: r = -this.
	 * It is equivalent to {@code this.negate(r)}
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #negate(Vector2f)
	 */
	def operator_minus : Vector2f {
		var r = new Vector2f
		negate(r)
		return r
	}

	/** Dot product: r = this.v.
	 * 
	 * @param v the vector
	 * @return the result.
	 * @see #dot(Vector2f)
	 */
	def operator_multiply(v : Vector2f) : float {
		dot(v)
	}

	/** Scale a vector: r = this * f.
	 * 
	 * @param v the vector
	 * @return the scaled vector.
	 */
	def operator_multiply(f : float) : Vector2f {
		var r = new Vector2f(this)
		r.scale(f)
		return r
	}

	/** Scale a vector: r = this / f.
	 * 
	 * @param v the vector
	 * @return the scaled vector.
	 */
	def operator_divide(f : float) : Vector2f {
		var r = new Vector2f(this)
		r.scale(1f / f)
		return r
	}

	/** Replies if the vectors are equal.
	 * 
	 * @param v the vector.
	 * @return test result.
	 */
	def operator_equals(v : Vector2f) : boolean {
		equals(v)
	}

	/** Replies if the vectors are not equal.
	 * 
	 * @param v the vector.
	 * @return test result.
	 */
	def operator_notEquals(v : Vector2f) : boolean {
		!equals(v)
	}

	/** Replies if the absolute angle between this and v
	 * 
	 * @param v the vector.
	 * @return the signed angle.
	 * @see #angle(Vector2f)
	 */
	def operator_upTo(v : Vector2f) : float {
		angle(v)
	}

	/** Replies if the signed angle from this to v
	 * 
	 * @param v the vector.
	 * @return the signed angle.
	 * @see #signedAngle(Vector2f)
	 */
	def operator_greaterThanDoubleDot(v : Vector2f) : float {
		signedAngle(v)
	}

	/** Replies if the signed angle from v to this
	 * 
	 * @param v the vector.
	 * @return the signed angle.
	 * @see #signedAngle(Vector2f)
	 */
	def operator_doubleDotLessThan(v : Vector2f) : float {
		-signedAngle(v)
	}

	/** If the tuple is nul then v else this.
	 * 
	 * @param v the vector.
	 * @return the vector.
	 * @see #epsilonNul(float)
	 * @see MathUtil#EPSILON
	 */
	def operator_elvis(v : Vector2f) : Vector2f {
		return if (epsilonNul(MathUtil::EPSILON)) v else this
	}
	
}
