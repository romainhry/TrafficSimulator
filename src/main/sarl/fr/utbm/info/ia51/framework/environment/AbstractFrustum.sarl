/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.environment

import java.util.Iterator
import java.util.NoSuchElementException
import java.util.UUID

/**
 * Abstract implementation of a field-of-view.
 * This implementation provides the default filtering behavior: remove the perceiver's body
 * from the perception.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractFrustum implements Frustum {
	
	val owner : UUID
	
	/**
	 * @param owner the identifier of the owner of this frustum.
	 */
	new (owner : UUID) {
		this.owner = owner
	}
	
	override getOwner : UUID {
		this.owner
	}

	override filter(iterator : Iterator<D>) : Iterator<D> with D extends SituatedObject {
		new PerceiverBodyFilter(this, iterator)
	}
	
	/**
	 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
	 * @version $Name$ $Revision$ $Date$
	 */
	private static class PerceiverBodyFilter<D extends SituatedObject> implements Iterator<D> {
		
		val enclosing : AbstractFrustum
		val original : Iterator<D> 
		var next : D
		
		new (enclosing : AbstractFrustum, original : Iterator<D>) {
			this.enclosing = enclosing
			this.original = original
			searchNext
		}
		
		private def searchNext {
			this.next = null
			while (this.next === null && this.original.hasNext) {
				var candidate = this.original.next
				if (candidate.ID != this.enclosing.owner) {
					this.next = candidate
				}
			}
		}

		override hasNext : boolean {
			this.next !== null
		}

		override next : D {
			var n = this.next
			if (n === null) {
				throw new NoSuchElementException
			}
			searchNext
			return n
		}
		
	}
	
}