/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.time

import java.util.concurrent.TimeUnit

/** Step-based Time manager.
 *
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
public class StepTimeManager extends AbstractTimeManager {

	var delay = 10f
	var t : float
	val step : float
	
	/**
	 * @param stepDuration the duration of one simulation step (in ms)
	 */
	new (stepDuration : float) {
		this.step = stepDuration.unitsToSeconds(TimeUnit::MILLISECONDS)
	}

	synchronized override getCurrentTime(unit : TimeUnit = null) : float {
		this.t.secondsToUnits(unit ?: TimeUnit.SECONDS)
	}

	synchronized override getLastStepDuration(unit : TimeUnit = null) : float {
		this.step.secondsToUnits(unit ?: TimeUnit.SECONDS)
	}

	synchronized override increment {
		this.t += this.step
	}

	synchronized override getSimulationDelay : float {
		this.delay
	}

	synchronized override setSimulationDelay(delay : float) {
		this.delay = Math::max(0f, delay)
	}
	
	override toString : String {
		"t=" + this.t + "; step=" + this.step + "; delay = " + this.delay
	}

}