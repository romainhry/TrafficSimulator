/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package fr.utbm.info.ia51.framework.environment

import fr.utbm.info.ia51.framework.math.Shape2f
import fr.utbm.info.ia51.framework.util.LocalizedString
import java.util.ArrayList
import java.util.UUID
import fr.utbm.info.ia51.framework.math.Vector2f
import fr.utbm.info.ia51.framework.math.MathUtil
import java.util.List

/**
 * Object on the environment.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class AgentBody extends AbstractMobileObject implements Body {

	val frustum : float
	
	transient var motionInfluence : MotionInfluence
	transient var otherInfluences : List<Influence> = new ArrayList
	transient var perceptions : List<Percept> = new ArrayList

	/**
	 * @param id
	 * @param shape the shape of the body, considering that it is centered at the (0,0) position.
	 * @param maxLinearSpeed is the maximal linear speed.
	 * @param maxLinearAcceleration is the maximal linear acceleration.
	 * @param maxAngularSpeed is the maximal angular speed.
	 * @param maxAngularAcceleration is the maximal angular acceleration.
	 * @param frustum the field-of-view associated to the body.
	 */
	new (id : UUID, shape : Shape2f<?>, maxLinearSpeed : float, maxLinearAcceleration : float,
			maxAngularSpeed : float, maxAngularAcceleration : float, frustum : float) {
		super(id, shape, maxLinearSpeed, maxLinearAcceleration, maxAngularSpeed, maxAngularAcceleration)
		//TODO assert (frustum == null || Objects.equals(id, frustum.getOwner()));
		this.frustum = frustum
		this.type = "BODY"
	}
	
	override clone : AgentBody {
		var c = super.clone as AgentBody
		c.motionInfluence = null
		c.otherInfluences = new ArrayList
		c.perceptions = new ArrayList
		return c
	}

	override toString : String {
		var label = LocalizedString::getString(this.class, "BODY_OF", ID) //$NON-NLS-1$;
		var name = getName
		if (name.isNullOrEmpty) {
			return name + "(" + label + ")"
		}
		return label
	}
	
	/** Replies the frustum associated to this body.
	 *
	 * @return the frustum.
	 */
	def getFrustum : float {
		this.frustum
	}
	
	/** Invoked to send the given influence to the environment.
	 *
	 * @param influence the influence.
	 */
	def influence(influence : Influence) {
		if (influence instanceof MotionInfluence) {
			if (influence.influencedObject === null || influence.influencedObject == ID) {
				switch(influence.type) {
					case KINEMATIC: {
						influenceKinematic(influence.linearInfluence, influence.angularInfluence)
					}
					case STEERING: {
						influenceSteering(influence.linearInfluence, influence.angularInfluence)
					}
				}
			} else {
				this.otherInfluences += influence
			}
		} else if (influence !== null) {
			this.otherInfluences += influence
		}
	}

	/** Invoked to send the influence to the environment.
	 * 
	 * @param linearInfluence is the linear influence to apply on the object.
	 * @param angularInfluence is the angular influence to apply on the object.
	 */
	def influenceKinematic(linearInfluence : Vector2f = null, angularInfluence : float = 0) {
		var li : Vector2f
		if (linearInfluence !== null) {
			li = linearInfluence.clone
			var nSpeed = li.length
			if (nSpeed > this.maxLinearSpeed) {
				li.length = this.maxLinearSpeed
			}
		}
		var ai = MathUtil::clamp(angularInfluence, -this.maxAngularSpeed, this.maxAngularSpeed)
		this.motionInfluence = new MotionInfluence(DynamicType::KINEMATIC, ID, li, ai)
	}
	
	/** Invoked to send the influence to the environment.
	 * 
	 * @param linearInfluence is the linear influence to apply on the object.
	 * @param angularInfluence is the angular influence to apply on the object.
	 */
	def influenceSteering(linearInfluence : Vector2f = null, angularInfluence : float = 0) {
		var li : Vector2f
		if (linearInfluence !== null) {
			li = linearInfluence.clone
			var nSpeed = li.length
			if (nSpeed > this.maxLinearAcceleration) {
				li.length = this.maxLinearAcceleration
			}
		}
		var ai = MathUtil::clamp(angularInfluence, -this.maxAngularAcceleration, this.maxAngularAcceleration)
		this.motionInfluence = new MotionInfluence(DynamicType::STEERING, ID, li, ai)
	}
	
	/** Replies all the perceived objects.
	 * 
	 * @return the perceived objects.
	 */
	def getPerceivedObjects : List<Percept> {
		this.perceptions
	}

	/** Replies the influence.
	 * 
	 * @return the influence.
	 */
	package def consumeOtherInfluences : List<Influence> {
		var otherInfluences = this.otherInfluences
		this.otherInfluences = new ArrayList
		for(i : otherInfluences) {
			i?.setEmitter(ID)
		}
		otherInfluences
	}
	
	/** Replies the influence.
	 * 
	 * @return the influence.
	 */
	package def consumeMotionInfluence : MotionInfluence {
		var mi = this.motionInfluence
		this.motionInfluence = null
		mi?.setEmitter(ID)
		mi
	}

	/** Set the perceptions.
	 * 
	 * @param perceptions
	 */
	package def setPerceptions(perceptions : List<Percept>) : void {
		// TODO assert(perceptions!=null);
		this.perceptions = perceptions
	}

}