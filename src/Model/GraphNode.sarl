

import java.util.ArrayList

class GraphNode {
	var neighbourNodes : ArrayList<GraphNode>	//Nodes where i can move to
	var conflictNodes : ArrayList <GraphNode>	
	/* Nodes that may cause a problem, so i need to have a perception of them */
	var lenght : float	//lenght of the node (dah)
	var envObj : ArrayList<EnvObjects>	//Objects in it
	var maxDesviationRight : float // Max desviation i can have to the right
	var maxDesviationLeft : float // Max desviation i can have to the left
	
	
	def itIsEmptyNode() : Boolean {
		if (envObj.empty) {
			return true
		}
		else {
			return false
		}
	}
	
	def itHasNeighbour() {
		if(neighbourNodes.empty){
			return false
		}else{
			return true
		}
	}
	def isNeighbour(node : GraphNode) : Boolean {
		for (n : neighbourNodes) {
			if (n == node) {
				return true
			}
		}
		return false
	}
	def add(node : GraphNode) {
		neighbourNodes.add(node)
		node.neighbourNodes.add(this)
	}
	def isEmptyAt(x : float, len : float) : Boolean {
		/*I need to know if the node is empty at a particular coordinate (x)
		 * and with his proximities (len)
		 */
		
	}
	
}
